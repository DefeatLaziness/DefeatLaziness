<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>使用技巧</title>
      <link href="/2023/01/09/shi-yong-ji-qiao/"/>
      <url>/2023/01/09/shi-yong-ji-qiao/</url>
      
        <content type="html"><![CDATA[<h1 id="开发技巧"><a href="#开发技巧" class="headerlink" title="开发技巧"></a>开发技巧</h1><h2 id="vscode"><a href="#vscode" class="headerlink" title="vscode"></a>vscode</h2><ol><li><p>vscode中可使用注释块来折叠代码</p><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">// #region</span><span class="token comment" spellcheck="true">// #endregion</span></code></pre></li></ol>]]></content>
      
      
      
        <tags>
            
            <tag> skill </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Node.js</title>
      <link href="/2022/11/01/nodejs/"/>
      <url>/2022/11/01/nodejs/</url>
      
        <content type="html"><![CDATA[<h1 id="Node"><a href="#Node" class="headerlink" title="Node"></a>Node</h1><h2 id="1-用途"><a href="#1-用途" class="headerlink" title="1. 用途"></a>1. 用途</h2><ol><li>基于Express框架，快速构建Web应用；</li><li>基于Electron框架，构建跨平台的桌面应用；</li><li>基于restify框架，快速构建API接口项目。</li></ol><h2 id="2-fs文件系统模块"><a href="#2-fs文件系统模块" class="headerlink" title="2. fs文件系统模块"></a>2. fs文件系统模块</h2><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">// fs.readFile(path[, options], callback)</span><span class="token comment" spellcheck="true">// callback: (err, data) => {}</span><span class="token comment" spellcheck="true">// 读取成功: err为null, data为数据对象</span><span class="token comment" spellcheck="true">// 读取失败: err为错误对象, data为undefined</span>fs<span class="token punctuation">.</span><span class="token function">readFile</span><span class="token punctuation">(</span><span class="token string">'./1.txt'</span><span class="token punctuation">,</span> <span class="token string">'utf8'</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>err<span class="token punctuation">,</span> data<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'----------------'</span><span class="token punctuation">)</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">// fs.writeFile(file, data[, options], callback)</span><span class="token comment" spellcheck="true">// callback: (err) => {}</span><span class="token comment" spellcheck="true">// 读取成功: err为null</span><span class="token comment" spellcheck="true">// 读取失败: err为错误对象</span>fs<span class="token punctuation">.</span><span class="token function">writeFile</span><span class="token punctuation">(</span><span class="token string">'./2.txt'</span><span class="token punctuation">,</span> <span class="token string">'Hello, jim'</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>err<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">// 注意：</span><span class="token comment" spellcheck="true">// 1.此方法只能用来创建文件，不能用来创建路径</span><span class="token comment" spellcheck="true">// 2.重复调用此方法写入同一个文件，新写入的内容会覆盖旧的内容</span></code></pre><h2 id="3-path-路径模块"><a href="#3-path-路径模块" class="headerlink" title="3. path 路径模块"></a>3. path 路径模块</h2><pre class=" language-js"><code class="language-js"><span class="token keyword">const</span> path <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'path'</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">// path.join()</span><span class="token keyword">const</span> pathStr <span class="token operator">=</span> path<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token string">'/a'</span><span class="token punctuation">,</span> <span class="token string">'/b/c'</span><span class="token punctuation">,</span> <span class="token string">'../'</span><span class="token punctuation">,</span> <span class="token string">'d'</span><span class="token punctuation">)</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>pathStr<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// \a\b\d</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>path<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span>__dirname<span class="token punctuation">,</span> <span class="token string">'./1.txt'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">// C:\Users\kim\Desktop\test\1.txt</span><span class="token comment" spellcheck="true">// path.basename()</span><span class="token keyword">const</span> fPath <span class="token operator">=</span> <span class="token string">'/a/b/c/index.html'</span><span class="token keyword">const</span> fileFullName <span class="token operator">=</span> path<span class="token punctuation">.</span><span class="token function">basename</span><span class="token punctuation">(</span>fPath<span class="token punctuation">)</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>fileFullName<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// index.html</span><span class="token keyword">const</span> fileName <span class="token operator">=</span> path<span class="token punctuation">.</span><span class="token function">basename</span><span class="token punctuation">(</span>fPath<span class="token punctuation">,</span> <span class="token string">'.html'</span><span class="token punctuation">)</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>fileName<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// index</span><span class="token comment" spellcheck="true">// path.extname()</span><span class="token keyword">const</span> extName <span class="token operator">=</span> path<span class="token punctuation">.</span><span class="token function">extname</span><span class="token punctuation">(</span>fPath<span class="token punctuation">)</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>extName<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// .html</span></code></pre><h2 id="4-http-模块"><a href="#4-http-模块" class="headerlink" title="4. http 模块"></a>4. http 模块</h2><pre class=" language-js"><code class="language-js"><span class="token keyword">const</span> http <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'http'</span><span class="token punctuation">)</span><span class="token keyword">const</span> server <span class="token operator">=</span> http<span class="token punctuation">.</span><span class="token function">createServer</span><span class="token punctuation">(</span><span class="token punctuation">)</span>server<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">'request'</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>req<span class="token punctuation">,</span> res<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">// req.url 是请求地址, req.method 是请求方法</span>  <span class="token keyword">const</span> <span class="token punctuation">{</span> url<span class="token punctuation">,</span> method <span class="token punctuation">}</span> <span class="token operator">=</span> req  <span class="token keyword">let</span> content <span class="token operator">=</span> <span class="token string">'&lt;h1>404 Not Found&lt;/h1>'</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>url <span class="token operator">===</span> <span class="token string">'/'</span> <span class="token operator">||</span> url <span class="token operator">===</span> <span class="token string">'/index'</span><span class="token punctuation">)</span> content <span class="token operator">=</span> <span class="token string">'&lt;h1>首页&lt;/h1>'</span>  <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>url <span class="token operator">===</span> <span class="token string">'/about'</span><span class="token punctuation">)</span> content <span class="token operator">=</span> <span class="token string">'&lt;h1>关于&lt;/h1>'</span>    <span class="token comment" spellcheck="true">// 为了防止中文显示乱码的问题，需要设置响应头 Content-Type 的值为 text/html; charset=utf-8</span>  res<span class="token punctuation">.</span><span class="token function">setHeader</span><span class="token punctuation">(</span><span class="token string">'Content-Type'</span><span class="token punctuation">,</span> <span class="token string">'text/html; charset=utf-8'</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">// res.end(content) 向客户端响应内容并结束请求</span>  res<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span>content<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">)</span>server<span class="token punctuation">.</span><span class="token function">listen</span><span class="token punctuation">(</span><span class="token number">80</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'server is running.'</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">)</span></code></pre><h2 id="5-模块化"><a href="#5-模块化" class="headerlink" title="5. 模块化"></a>5. 模块化</h2><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">// 使用require加载模块的时候，会执行模块内的代码</span><span class="token comment" spellcheck="true">// 模块在第一次加载后会被缓存 === 多次调用require()不会导致模块的代码被多次执行。</span><span class="token comment" spellcheck="true">// index.js</span><span class="token keyword">const</span> express <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'express'</span><span class="token punctuation">)</span><span class="token keyword">const</span> router <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'./router'</span><span class="token punctuation">)</span><span class="token keyword">const</span> app <span class="token operator">=</span> <span class="token function">express</span><span class="token punctuation">(</span><span class="token punctuation">)</span>app<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span>router<span class="token punctuation">)</span>app<span class="token punctuation">.</span><span class="token function">listen</span><span class="token punctuation">(</span><span class="token number">80</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'express server is running at http:127.0.0.1:80'</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">// router.js</span><span class="token keyword">const</span> express <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'express'</span><span class="token punctuation">)</span><span class="token keyword">const</span> router <span class="token operator">=</span> express<span class="token punctuation">.</span><span class="token function">Router</span><span class="token punctuation">(</span><span class="token punctuation">)</span>router<span class="token punctuation">.</span><span class="token keyword">get</span><span class="token punctuation">(</span><span class="token string">'/user'</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>req<span class="token punctuation">,</span> res<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>  res<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span><span class="token punctuation">{</span> name<span class="token punctuation">:</span> <span class="token string">'kim'</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">)</span>router<span class="token punctuation">.</span><span class="token function">post</span><span class="token punctuation">(</span><span class="token string">'/user'</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>req<span class="token punctuation">,</span> res<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>  res<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span><span class="token string">'请求成功！'</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">)</span>module<span class="token punctuation">.</span>exports <span class="token operator">=</span> router</code></pre><h2 id="6-Express的基本使用"><a href="#6-Express的基本使用" class="headerlink" title="6. Express的基本使用"></a>6. Express的基本使用</h2><pre class=" language-js"><code class="language-js"><span class="token keyword">const</span> express <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'express'</span><span class="token punctuation">)</span><span class="token keyword">const</span> app <span class="token operator">=</span> <span class="token function">express</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">// 对外托管静态资源</span><span class="token comment" spellcheck="true">// 参数1 '/public' 为访问的路径前缀e.g.: http://localhost/public/index.html</span><span class="token comment" spellcheck="true">// 参数2 express.static('../resource/day1') 的路径以当前命令执行的目录为准</span><span class="token comment" spellcheck="true">// e.g.: a文件夹内有需要暴露的index.html文件, b文件夹内有需要执行的js文件</span><span class="token comment" spellcheck="true">// 若执行目录与a同级，则路径应为 './a'</span><span class="token comment" spellcheck="true">// 若执行目录位于b内，则路径应为 '../a'</span>app<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span><span class="token string">'/public'</span><span class="token punctuation">,</span> express<span class="token punctuation">.</span><span class="token keyword">static</span><span class="token punctuation">(</span><span class="token string">'../resource/day1'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>app<span class="token punctuation">.</span><span class="token keyword">get</span><span class="token punctuation">(</span><span class="token string">'/user'</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>req<span class="token punctuation">,</span> res<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>  res<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span><span class="token punctuation">{</span> name<span class="token punctuation">:</span> <span class="token string">'张三'</span><span class="token punctuation">,</span> age<span class="token punctuation">:</span> <span class="token number">18</span><span class="token punctuation">,</span> sex<span class="token punctuation">:</span> <span class="token string">'男'</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">)</span>app<span class="token punctuation">.</span><span class="token function">post</span><span class="token punctuation">(</span><span class="token string">'/user'</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>req<span class="token punctuation">,</span> res<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>  res<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span><span class="token string">'请求成功！'</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">)</span>app<span class="token punctuation">.</span><span class="token keyword">get</span><span class="token punctuation">(</span><span class="token string">'/'</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>req<span class="token punctuation">,</span> res<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span><span class="token comment" spellcheck="true">// req.query 可以获取url的查询参数 e.g.: http://127.0.0.1?name=kim</span>  res<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span>req<span class="token punctuation">.</span>query<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// {name: 'kim'}</span><span class="token punctuation">}</span><span class="token punctuation">)</span>app<span class="token punctuation">.</span><span class="token keyword">get</span><span class="token punctuation">(</span><span class="token string">'/user/:id'</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>req<span class="token punctuation">,</span> res<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span><span class="token comment" spellcheck="true">// req.params 可以获取url的动态参数 e.g.: http://127.0.0.1/user/1</span>  res<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span>req<span class="token punctuation">.</span>params<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// {id: '1'}</span><span class="token punctuation">}</span><span class="token punctuation">)</span>app<span class="token punctuation">.</span><span class="token function">listen</span><span class="token punctuation">(</span><span class="token number">80</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'express server is running at http:127.0.0.1:80'</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">)</span></code></pre><h2 id="7-中间件"><a href="#7-中间件" class="headerlink" title="7.中间件"></a>7.中间件</h2><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">// 定义全局中间件</span><span class="token comment" spellcheck="true">// 多次调用app.use()定义中间件，会按照定义的先后顺序来触发中间件函数，因此须在定义路由前定义</span>app<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span><span class="token punctuation">(</span>req<span class="token punctuation">,</span> res<span class="token punctuation">,</span> next<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'这是一个简单的全局中间件'</span><span class="token punctuation">)</span>    <span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">// 局部中间件</span><span class="token comment" spellcheck="true">// 不使用app.use()定义的中间件都叫局部中间件</span><span class="token comment" spellcheck="true">// mw 为中间件函数</span>app<span class="token punctuation">.</span><span class="token keyword">get</span><span class="token punctuation">(</span><span class="token string">'/'</span><span class="token punctuation">,</span> mw<span class="token punctuation">,</span> <span class="token punctuation">(</span>req<span class="token punctuation">,</span> res<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span> res<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span><span class="token string">'请求成功'</span><span class="token punctuation">)</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">// 定义多个局部中间件</span>app<span class="token punctuation">.</span><span class="token keyword">get</span><span class="token punctuation">(</span><span class="token string">'/'</span><span class="token punctuation">,</span> mw1<span class="token punctuation">,</span> mw2<span class="token punctuation">,</span> <span class="token punctuation">(</span>req<span class="token punctuation">,</span> res<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span> res<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span><span class="token string">'请求成功'</span><span class="token punctuation">)</span> <span class="token punctuation">}</span><span class="token punctuation">)</span>app<span class="token punctuation">.</span><span class="token keyword">get</span><span class="token punctuation">(</span><span class="token string">'/'</span><span class="token punctuation">,</span> <span class="token punctuation">[</span>mw1<span class="token punctuation">,</span> mw2<span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>req<span class="token punctuation">,</span> res<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span> res<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span><span class="token string">'请求成功'</span><span class="token punctuation">)</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">// 中间件注意事项</span><span class="token comment" spellcheck="true">// 1. 在路由之前注册中间件</span><span class="token comment" spellcheck="true">// 2. 接收到客户端的请求后，可以连续调用多个中间件进行处理</span><span class="token comment" spellcheck="true">// 3. 执行完中间件的业务代码后，要调用next()函数</span><span class="token comment" spellcheck="true">// 4. 为了防止代码逻辑混乱，在调用next()函数后不要再写代码</span><span class="token comment" spellcheck="true">// 5. 连续调用多个中间件时，多个中间件之间共享req, res对象</span></code></pre><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">// 中间件的分类</span><span class="token comment" spellcheck="true">// 1.应用级别的中间件</span><span class="token comment" spellcheck="true">// 通过app.use()/app.get()/app.post()，绑定到app实例上的中间件，叫做应用级别的中间件。</span><span class="token comment" spellcheck="true">// 2.路由级别的中间件</span><span class="token comment" spellcheck="true">// 绑定到express.Router()实例上的中间件，叫做路由级别的中间件。它的用法和应用级别的中间件没有任何区别。</span><span class="token keyword">const</span> express <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'express'</span><span class="token punctuation">)</span><span class="token keyword">const</span> router <span class="token operator">=</span> express<span class="token punctuation">.</span><span class="token function">Router</span><span class="token punctuation">(</span><span class="token punctuation">)</span>router<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span>mw<span class="token punctuation">)</span>router<span class="token punctuation">.</span><span class="token keyword">get</span><span class="token punctuation">(</span><span class="token string">'/'</span><span class="token punctuation">,</span> mw<span class="token punctuation">,</span> <span class="token punctuation">(</span>req<span class="token punctuation">,</span>res<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">// 3.错误级别的中间件</span><span class="token comment" spellcheck="true">// 专门用来捕获项目中发生的异常错误，防止项目崩溃</span><span class="token comment" spellcheck="true">// 必须主车在所有路由之后</span>app<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span><span class="token punctuation">(</span>err<span class="token punctuation">,</span> req<span class="token punctuation">,</span> res<span class="token punctuation">,</span> next<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'发生错误：'</span> <span class="token operator">+</span> err<span class="token punctuation">.</span>message<span class="token punctuation">)</span>    res<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span><span class="token string">'Error!'</span> <span class="token operator">+</span> err<span class="token punctuation">.</span>message<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">// 4.Express内置中间件</span><span class="token comment" spellcheck="true">// express.static快速托管静态资源的内置中间件（无兼容性）</span><span class="token comment" spellcheck="true">// express.json解析JSON格式的请求体数据（有兼容性，仅4.16.0+版本可用）</span>app<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span>express<span class="token punctuation">.</span><span class="token function">json</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">// 在服务端，可以通过req.body获取JSON格式的表单数据和url-encoded格式的数据</span><span class="token comment" spellcheck="true">// express.urlencoded解析URL-encoded格式的请求体数据（有兼容性，仅4.16.0+版本可用）</span>app<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span>express<span class="token punctuation">.</span><span class="token function">urlencoded</span><span class="token punctuation">(</span><span class="token punctuation">{</span> extended<span class="token punctuation">:</span> <span class="token boolean">false</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">// 5.第三方中间件 </span><span class="token comment" spellcheck="true">// 非Express官方内置的，由第三方开发出来的中间件</span></code></pre><h3 id="自定义中间件"><a href="#自定义中间件" class="headerlink" title="自定义中间件"></a>自定义中间件</h3><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">// index.js</span><span class="token keyword">const</span> express <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'express'</span><span class="token punctuation">)</span><span class="token keyword">const</span> bodyParser <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'./custom_body_parse'</span><span class="token punctuation">)</span><span class="token keyword">const</span> app <span class="token operator">=</span> <span class="token function">express</span><span class="token punctuation">(</span><span class="token punctuation">)</span>app<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span>bodyParser<span class="token punctuation">)</span>app<span class="token punctuation">.</span><span class="token function">post</span><span class="token punctuation">(</span><span class="token string">'/'</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>req<span class="token punctuation">,</span> res<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>  res<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span>req<span class="token punctuation">.</span>body<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">)</span>app<span class="token punctuation">.</span><span class="token function">listen</span><span class="token punctuation">(</span><span class="token number">80</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'server is running at http://127.0.0.1'</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">// custom_body_parse.js</span><span class="token keyword">const</span> qs <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'querystring'</span><span class="token punctuation">)</span><span class="token keyword">function</span> <span class="token function">bodyParser</span><span class="token punctuation">(</span>req<span class="token punctuation">,</span> res<span class="token punctuation">,</span> next<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">let</span> str <span class="token operator">=</span> <span class="token string">''</span>  <span class="token comment" spellcheck="true">// 监听req的data事件，可能多块拼接</span>  req<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">'data'</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>chunk<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>    str <span class="token operator">+</span><span class="token operator">=</span> chunk  <span class="token punctuation">}</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">// 监听req的end事件</span>  req<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">'end'</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>    <span class="token keyword">const</span> body <span class="token operator">=</span> qs<span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span>    req<span class="token punctuation">.</span>body <span class="token operator">=</span> body    <span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">}</span>module<span class="token punctuation">.</span>exports <span class="token operator">=</span> bodyParser</code></pre><h2 id="8-跨域解决"><a href="#8-跨域解决" class="headerlink" title="8. 跨域解决"></a>8. 跨域解决</h2><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">// 使用cors中间</span><span class="token comment" spellcheck="true">// npm i cors</span><span class="token keyword">const</span> cors <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'cors'</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">// 在定义路由前定义cors中间件</span>app<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span><span class="token function">cors</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">// 手动配置</span><span class="token comment" spellcheck="true">// 1.Access-Control-Allow-Origin</span><span class="token comment" spellcheck="true">// url参数为允许访问服务器的地址，*代表所有</span>res<span class="token punctuation">.</span><span class="token function">setHeader</span><span class="token punctuation">(</span><span class="token string">'Access-Control-Allow-Origin'</span><span class="token punctuation">,</span> url<span class="token punctuation">)</span><span class="token comment" spellcheck="true">// 2.Access-Control-Allow-Headers</span><span class="token comment" spellcheck="true">// 第二个参数为配置的信息</span>res<span class="token punctuation">.</span><span class="token function">setHeader</span><span class="token punctuation">(</span><span class="token string">'Access-Control-Allow-Headers'</span><span class="token punctuation">,</span> <span class="token string">'Content-Type, X-Custom-Header'</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">// 2.Access-Control-Allow-Methods</span><span class="token comment" spellcheck="true">// 第二个参数为指明除了GET、POST、HEAD之外的请求，*代表所有请求</span>res<span class="token punctuation">.</span><span class="token function">setHeader</span><span class="token punctuation">(</span><span class="token string">'Access-Control-Allow-Methods'</span><span class="token punctuation">,</span> <span class="token string">'PUT, DELETE'</span><span class="token punctuation">)</span></code></pre><h2 id="9-Mysql"><a href="#9-Mysql" class="headerlink" title="9. Mysql"></a>9. Mysql</h2><h3 id="1-数据库分类"><a href="#1-数据库分类" class="headerlink" title="1. 数据库分类"></a>1. 数据库分类</h3><p>传统型数据库（关系型数据库、SQL数据库）：MySQL、Oracle、SQL Server</p><p>新型数据库（非关系型数据库、NoSQL数据库）：Mongodb</p><h3 id="2-SQL语句"><a href="#2-SQL语句" class="headerlink" title="2. SQL语句"></a>2. SQL语句</h3><pre class=" language-sql"><code class="language-sql"><span class="token comment" spellcheck="true">-- 关键字对大小写不敏感</span><span class="token comment" spellcheck="true">-- 查</span><span class="token comment" spellcheck="true">-- SELECT 列名称 FROM 表名称</span><span class="token comment" spellcheck="true">-- 其中 * 代表所有列</span><span class="token comment" spellcheck="true">-- 增</span><span class="token comment" spellcheck="true">-- insert into table_name(column1, column2...) values (value1, value2...)</span><span class="token comment" spellcheck="true">-- 改</span><span class="token comment" spellcheck="true">-- update table_name set colName = newVal where colName = val</span><span class="token comment" spellcheck="true">-- 删</span><span class="token comment" spellcheck="true">-- delete from table_name where colName = val</span><span class="token comment" spellcheck="true">-- e.g.</span><span class="token comment" spellcheck="true">-- select * from my_db_01.users</span><span class="token comment" spellcheck="true">-- select username, password from my_db_01.users</span><span class="token comment" spellcheck="true">-- insert into my_db_01.users (usernameusers, password) values ('tony stark', '098123')</span><span class="token comment" spellcheck="true">-- update my_db_01.users set password = '888888' where id = 4</span><span class="token comment" spellcheck="true">-- update my_db_01.users set password = 'admin123', status = 1 where id = 2</span><span class="token comment" spellcheck="true">-- delete from my_db_01.users where id = 4</span></code></pre><h3 id="3-在项目中使用mysql"><a href="#3-在项目中使用mysql" class="headerlink" title="3. 在项目中使用mysql"></a>3. 在项目中使用mysql</h3><ol><li><p>安装操作MySQL数据库的第三方模块(mysql)</p><pre class=" language-shell"><code class="language-shell">npm i mysql</code></pre></li><li><p>通过mysql模块连接到MySQL数据库</p></li><li><p>通过mysql模块执行SQL语句</p></li></ol><pre class=" language-js"><code class="language-js"><span class="token keyword">const</span> mysql <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'mysql'</span><span class="token punctuation">)</span><span class="token keyword">const</span> db <span class="token operator">=</span> mysql<span class="token punctuation">.</span><span class="token function">createPool</span><span class="token punctuation">(</span><span class="token punctuation">{</span>  host<span class="token punctuation">:</span> <span class="token string">'127.0.0.1'</span><span class="token punctuation">,</span>  user<span class="token punctuation">:</span> <span class="token string">'root'</span><span class="token punctuation">,</span>  password<span class="token punctuation">:</span> <span class="token string">'admin123'</span><span class="token punctuation">,</span>  database<span class="token punctuation">:</span> <span class="token string">'my_db_01'</span><span class="token punctuation">,</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">// 插入数据</span><span class="token keyword">const</span> user <span class="token operator">=</span> <span class="token punctuation">{</span> username<span class="token punctuation">:</span> <span class="token string">'Spider-Ma'</span><span class="token punctuation">,</span> password<span class="token punctuation">:</span> <span class="token string">'pcc321'</span> <span class="token punctuation">}</span><span class="token comment" spellcheck="true">// ? 代表占位符</span><span class="token keyword">const</span> sqlStrForInsert <span class="token operator">=</span> <span class="token string">'insert into users (username, password) values (?, ?)'</span>db<span class="token punctuation">.</span><span class="token function">query</span><span class="token punctuation">(</span>sqlStrForInsert<span class="token punctuation">,</span> <span class="token punctuation">[</span>user<span class="token punctuation">.</span>username<span class="token punctuation">,</span> user<span class="token punctuation">.</span>password<span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>err<span class="token punctuation">,</span> result<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>err<span class="token punctuation">)</span> <span class="token keyword">return</span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>err<span class="token punctuation">.</span>message<span class="token punctuation">)</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>result<span class="token punctuation">.</span>affectedRows <span class="token operator">===</span> <span class="token number">1</span><span class="token punctuation">)</span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'插入数据成功'</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">// 插入数据便捷写法</span><span class="token keyword">const</span> user <span class="token operator">=</span> <span class="token punctuation">{</span> username<span class="token punctuation">:</span> <span class="token string">'Spider'</span><span class="token punctuation">,</span> password<span class="token punctuation">:</span> <span class="token string">'pcc321'</span> <span class="token punctuation">}</span><span class="token comment" spellcheck="true">// ? 代表占位符</span><span class="token keyword">const</span> sqlStrForInsert <span class="token operator">=</span> <span class="token string">'insert into users set ?'</span>db<span class="token punctuation">.</span><span class="token function">query</span><span class="token punctuation">(</span>sqlStrForInsert<span class="token punctuation">,</span> user<span class="token punctuation">,</span> <span class="token punctuation">(</span>err<span class="token punctuation">,</span> result<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>err<span class="token punctuation">)</span> <span class="token keyword">return</span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>err<span class="token punctuation">.</span>message<span class="token punctuation">)</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>result<span class="token punctuation">.</span>affectedRows <span class="token operator">===</span> <span class="token number">1</span><span class="token punctuation">)</span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'插入数据成功'</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">// 删除数据便捷写法</span><span class="token comment" spellcheck="true">// ? 代表占位符</span><span class="token keyword">const</span> sqlStrForDelete <span class="token operator">=</span> <span class="token string">'delete from users where id=?'</span>db<span class="token punctuation">.</span><span class="token function">query</span><span class="token punctuation">(</span>sqlStrForDelete<span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>err<span class="token punctuation">,</span> result<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>err<span class="token punctuation">)</span> <span class="token keyword">return</span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>err<span class="token punctuation">.</span>message<span class="token punctuation">)</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>result<span class="token punctuation">.</span>affectedRows <span class="token operator">===</span> <span class="token number">1</span><span class="token punctuation">)</span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'删除数据成功'</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">// 更新数据便捷写法</span><span class="token keyword">const</span> user <span class="token operator">=</span> <span class="token punctuation">{</span> id<span class="token punctuation">:</span> <span class="token number">5</span><span class="token punctuation">,</span> username<span class="token punctuation">:</span> <span class="token string">'aba'</span><span class="token punctuation">,</span> password<span class="token punctuation">:</span> <span class="token string">'000'</span> <span class="token punctuation">}</span><span class="token comment" spellcheck="true">// ? 代表占位符</span><span class="token keyword">const</span> sqlStrForUpdate <span class="token operator">=</span> <span class="token string">'update users set ? where id=?'</span>db<span class="token punctuation">.</span><span class="token function">query</span><span class="token punctuation">(</span>sqlStrForUpdate<span class="token punctuation">,</span> <span class="token punctuation">[</span>user<span class="token punctuation">,</span> user<span class="token punctuation">.</span>id<span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>err<span class="token punctuation">,</span> result<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>err<span class="token punctuation">)</span> <span class="token keyword">return</span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>err<span class="token punctuation">.</span>message<span class="token punctuation">)</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>result<span class="token punctuation">.</span>affectedRows <span class="token operator">===</span> <span class="token number">1</span><span class="token punctuation">)</span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'更新数据成功'</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">// 标记删除</span><span class="token comment" spellcheck="true">// 使用delete语句会真正地把数据从数据库中删除，为了保险起见，将用户状态禁用了则代表删除了</span><span class="token keyword">const</span> sqlStrForMarkDel <span class="token operator">=</span> <span class="token string">'update users set status = 1 where id=?'</span>db<span class="token punctuation">.</span><span class="token function">query</span><span class="token punctuation">(</span>sqlStrForMarkDel<span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>err<span class="token punctuation">,</span> result<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>err<span class="token punctuation">)</span> <span class="token keyword">return</span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>err<span class="token punctuation">.</span>message<span class="token punctuation">)</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>result<span class="token punctuation">.</span>affectedRows <span class="token operator">===</span> <span class="token number">1</span><span class="token punctuation">)</span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'标记删除成功！'</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">// 查询数据</span>db<span class="token punctuation">.</span><span class="token function">query</span><span class="token punctuation">(</span><span class="token string">'select * from users'</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>err<span class="token punctuation">,</span> result<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>err<span class="token punctuation">)</span> <span class="token keyword">return</span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>err<span class="token punctuation">.</span>message<span class="token punctuation">)</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">)</span></code></pre><h2 id="10-Web开发模式"><a href="#10-Web开发模式" class="headerlink" title="10. Web开发模式"></a>10. Web开发模式</h2><ul><li><p>服务端渲染</p><p>优点：前端耗时少、有利于SEO</p><p>缺点：占用服务器资源、不利于前后端分离而导致开发效率低</p><p>身份认证：推荐使用Session认证机制</p></li><li><p>前后端分离</p><p>优点：开发体验好、用户体验好、减轻了服务端的渲染压力</p><p>缺点：不利于SEO（可以通过SSR技术解决）</p><p>身份认证：推荐使用JWT认证机制</p></li></ul><h2 id="11-Express中使用Session认证"><a href="#11-Express中使用Session认证" class="headerlink" title="11. Express中使用Session认证"></a>11. Express中使用Session认证</h2><ol><li><p>安装express-session中间件</p><pre class=" language-shell"><code class="language-shell">npm i express-session</code></pre></li><li><p>配置express-session中间件</p><pre class=" language-js"><code class="language-js"><span class="token keyword">const</span> session <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'express-session'</span><span class="token punctuation">)</span>app<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span>  <span class="token function">session</span><span class="token punctuation">(</span><span class="token punctuation">{</span>    secret<span class="token punctuation">:</span> <span class="token string">'kim'</span><span class="token punctuation">,</span>    resave<span class="token punctuation">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>    saveUninitialized<span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">)</span></code></pre></li><li><p>将数据存储到session中</p><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">// 登录的 API 接口</span>app<span class="token punctuation">.</span><span class="token function">post</span><span class="token punctuation">(</span><span class="token string">'/api/login'</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>req<span class="token punctuation">,</span> res<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">// 判断用户提交的登录信息是否正确</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>req<span class="token punctuation">.</span>body<span class="token punctuation">.</span>username <span class="token operator">!==</span> <span class="token string">'admin'</span> <span class="token operator">||</span> req<span class="token punctuation">.</span>body<span class="token punctuation">.</span>password <span class="token operator">!==</span> <span class="token string">'000000'</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> res<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span><span class="token punctuation">{</span> status<span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">,</span> msg<span class="token punctuation">:</span> <span class="token string">'登录失败'</span> <span class="token punctuation">}</span><span class="token punctuation">)</span>  <span class="token punctuation">}</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>req<span class="token punctuation">.</span>session<span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">// TODO_02：请将登录成功后的用户信息，保存到 Session 中</span>  req<span class="token punctuation">.</span>session<span class="token punctuation">.</span>user <span class="token operator">=</span> req<span class="token punctuation">.</span>body  req<span class="token punctuation">.</span>session<span class="token punctuation">.</span>isLogin <span class="token operator">=</span> <span class="token boolean">true</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>req<span class="token punctuation">.</span>session<span class="token punctuation">)</span>  res<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span><span class="token punctuation">{</span> status<span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">,</span> msg<span class="token punctuation">:</span> <span class="token string">'登录成功'</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">)</span></code></pre></li><li><p>将数据从session中取出</p><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">// 获取用户姓名的接口</span>app<span class="token punctuation">.</span><span class="token keyword">get</span><span class="token punctuation">(</span><span class="token string">'/api/username'</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>req<span class="token punctuation">,</span> res<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">// TODO_03：请从 Session 中获取用户的名称，响应给客户端</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>req<span class="token punctuation">.</span>session<span class="token punctuation">.</span>isLogin<span class="token punctuation">)</span> <span class="token keyword">return</span> res<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span><span class="token punctuation">{</span> status<span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">,</span> msg<span class="token punctuation">:</span> <span class="token string">'fail'</span> <span class="token punctuation">}</span><span class="token punctuation">)</span>  res<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span><span class="token punctuation">{</span>    status<span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">,</span>    msg<span class="token punctuation">:</span> <span class="token string">'success'</span><span class="token punctuation">,</span>    username<span class="token punctuation">:</span> req<span class="token punctuation">.</span>session<span class="token punctuation">.</span>user<span class="token punctuation">.</span>username<span class="token punctuation">,</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">)</span></code></pre></li><li><p>清空session中的数据</p><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">// 退出登录的接口</span>app<span class="token punctuation">.</span><span class="token function">post</span><span class="token punctuation">(</span><span class="token string">'/api/logout'</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>req<span class="token punctuation">,</span> res<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">// TODO_04：清空 Session 信息</span>  req<span class="token punctuation">.</span>session<span class="token punctuation">.</span><span class="token function">destroy</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  res<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span><span class="token punctuation">{</span>    status<span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">,</span>    msg<span class="token punctuation">:</span> <span class="token string">'退出登录成功！'</span><span class="token punctuation">,</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">)</span></code></pre></li></ol><h2 id="12-JWT认证机制"><a href="#12-JWT认证机制" class="headerlink" title="12. JWT认证机制"></a>12. JWT认证机制</h2><p>   由三部分组成：Header(头部).Payload(有效载荷).Signature(签名)</p><ul><li>其中Payload部分才是真正的用户信息，它是用户信息经过加密之后生成的字符串。</li><li>Header 和 Signature 是安全性相关的部分，只是为了保证token的安全性。</li></ul><p>   在Express中使用JWT</p><ol><li><p>安装JWT相关包</p><pre class=" language-shell"><code class="language-shell">npm i jsonwebtoken express-jwt// jsonwebtoken 生成JWT字符串// express-jwt 将JWT字符串还原成json对象</code></pre></li><li><p>导入JWT相关包</p><pre class=" language-js"><code class="language-js"><span class="token keyword">const</span> jwt <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'jsonwebtoken'</span><span class="token punctuation">)</span><span class="token keyword">const</span> expressJWT <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'express-jwt'</span><span class="token punctuation">)</span></code></pre></li><li><p>定义secret密钥&amp;生成token</p><pre class=" language-js"><code class="language-js"><span class="token keyword">const</span> secretKey <span class="token operator">=</span> <span class="token string">'DefeatLaziness~~'</span><span class="token comment" spellcheck="true">// 登录接口</span>app<span class="token punctuation">.</span><span class="token function">post</span><span class="token punctuation">(</span><span class="token string">'/api/login'</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>req<span class="token punctuation">,</span> res<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">// 将 req.body 请求体中的数据，转存为 userinfo 常量</span>  <span class="token keyword">const</span> userinfo <span class="token operator">=</span> req<span class="token punctuation">.</span>body  <span class="token comment" spellcheck="true">// 登录失败</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>userinfo<span class="token punctuation">.</span>username <span class="token operator">!==</span> <span class="token string">'admin'</span> <span class="token operator">||</span> userinfo<span class="token punctuation">.</span>password <span class="token operator">!==</span> <span class="token string">'000000'</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> res<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span><span class="token punctuation">{</span>      status<span class="token punctuation">:</span> <span class="token number">400</span><span class="token punctuation">,</span>      message<span class="token punctuation">:</span> <span class="token string">'登录失败！'</span><span class="token punctuation">,</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span>  <span class="token punctuation">}</span>  <span class="token comment" spellcheck="true">// 登录成功</span>  <span class="token comment" spellcheck="true">// TODO_03：在登录成功之后，调用 jwt.sign() 方法生成 JWT 字符串。并通过 token 属性发送给客户端</span>  <span class="token comment" spellcheck="true">// 参数1: 用户的信息对象</span>  <span class="token comment" spellcheck="true">// 参数2：加密的密钥</span>  <span class="token comment" spellcheck="true">// 参数3：配置对象</span>  <span class="token keyword">const</span> tokenStr <span class="token operator">=</span> jwt<span class="token punctuation">.</span><span class="token function">sign</span><span class="token punctuation">(</span><span class="token punctuation">{</span> username<span class="token punctuation">:</span> userinfo<span class="token punctuation">.</span>username <span class="token punctuation">}</span><span class="token punctuation">,</span> secretKey<span class="token punctuation">,</span> <span class="token punctuation">{</span>    expiresIn<span class="token punctuation">:</span> <span class="token string">'30s'</span><span class="token punctuation">,</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span>  res<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span><span class="token punctuation">{</span>    status<span class="token punctuation">:</span> <span class="token number">200</span><span class="token punctuation">,</span>    message<span class="token punctuation">:</span> <span class="token string">'登录成功！'</span><span class="token punctuation">,</span>    token<span class="token punctuation">:</span> tokenStr<span class="token punctuation">,</span> <span class="token comment" spellcheck="true">// 要发送给客户端的 token 字符串</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">)</span></code></pre></li><li><p>将JWT字符串还原为JSON对象</p><pre class=" language-js"><code class="language-js">app<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span><span class="token function">expressJWT</span><span class="token punctuation">(</span><span class="token punctuation">{</span> secret<span class="token punctuation">:</span> secretKey <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">unless</span><span class="token punctuation">(</span><span class="token punctuation">{</span> path<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token operator">/</span><span class="token operator">^</span>\<span class="token operator">/</span>api\<span class="token operator">/</span><span class="token operator">/</span><span class="token punctuation">]</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">// 只要配置成功express-jwt中间件，就会把解析出来的用户信息挂载到req.user中</span><span class="token comment" spellcheck="true">// 这是一个有权限的 API 接口</span>app<span class="token punctuation">.</span><span class="token keyword">get</span><span class="token punctuation">(</span><span class="token string">'/admin/getinfo'</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>req<span class="token punctuation">,</span> res<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">// TODO_05：使用 req.user 获取用户信息，并使用 data 属性将用户信息发送给客户端</span>  res<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span><span class="token punctuation">{</span>    status<span class="token punctuation">:</span> <span class="token number">200</span><span class="token punctuation">,</span>    message<span class="token punctuation">:</span> <span class="token string">'获取用户信息成功！'</span><span class="token punctuation">,</span>    data<span class="token punctuation">:</span> req<span class="token punctuation">.</span>auth<span class="token punctuation">,</span> <span class="token comment" spellcheck="true">// 要发送给客户端的用户信息</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">)</span></code></pre></li><li><p>捕获JWT解析失败</p><pre class=" language-js"><code class="language-js">app<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span><span class="token punctuation">(</span>err<span class="token punctuation">,</span> req<span class="token punctuation">,</span> res<span class="token punctuation">,</span> next<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>err<span class="token punctuation">.</span>name <span class="token operator">===</span> <span class="token string">'UnauthorizedError'</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> res<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span><span class="token punctuation">{</span> status<span class="token punctuation">:</span> <span class="token number">401</span><span class="token punctuation">,</span> message<span class="token punctuation">:</span> <span class="token string">'无效的token'</span> <span class="token punctuation">}</span><span class="token punctuation">)</span>  res<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span><span class="token punctuation">{</span> status<span class="token punctuation">:</span> <span class="token number">500</span><span class="token punctuation">,</span> message<span class="token punctuation">:</span> <span class="token string">'未知错误'</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">)</span></code></pre></li></ol>]]></content>
      
      
      <categories>
          
          <category> Node </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Node </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JS</title>
      <link href="/2022/10/25/js/"/>
      <url>/2022/10/25/js/</url>
      
        <content type="html"><![CDATA[<h1 id="JS"><a href="#JS" class="headerlink" title="JS"></a>JS</h1><h2 id="1-什么是Javascript"><a href="#1-什么是Javascript" class="headerlink" title="1.什么是Javascript"></a>1.什么是Javascript</h2><p>​1995年→目的：代替服务端语言处理输入验证</p><p>​Javascript的核心：ECMAScript 、DOM、BOM</p><h2 id="2-语言基础"><a href="#2-语言基础" class="headerlink" title="2.语言基础"></a>2.语言基础</h2><h3 id="变量"><a href="#变量" class="headerlink" title="变量"></a>变量</h3><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">// 1. var存在变量提升</span><span class="token comment" spellcheck="true">// 2. 声明的是函数作用域</span><span class="token comment" spellcheck="true">// 3. 可以通过省略var操作符来定义全局变量。但不推荐</span><span class="token comment" spellcheck="true">// 他人无法判断此时省略var是不是有意为之，不易理解；且在严格模式下，会导致抛出ReferenceError</span>message <span class="token operator">=</span> <span class="token string">'hi'</span></code></pre><pre><code>            #### let 和 const</code></pre><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">// 1. 不存在变量提升（暂时性死区）</span><span class="token comment" spellcheck="true">// 2. 声明的是块级作用域</span><span class="token comment" spellcheck="true">// 3. 不能冗余声明，会报错</span><span class="token comment" spellcheck="true">// 区别：const在声明的时候必须同时初始化变量，且不能修改const声明的变量</span><span class="token comment" spellcheck="true">// 注意：const声明的限制只适用于它指向的变量的引用。</span><span class="token keyword">const</span> person <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>person<span class="token punctuation">.</span>name <span class="token operator">=</span> <span class="token string">'kim'</span> <span class="token comment" spellcheck="true">// 不会报错</span></code></pre><h3 id="数据类型"><a href="#数据类型" class="headerlink" title="数据类型"></a>数据类型</h3><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">// 标签函数</span><span class="token keyword">let</span> a <span class="token operator">=</span> <span class="token number">6</span><span class="token punctuation">,</span>    b <span class="token operator">=</span> <span class="token number">9</span><span class="token keyword">function</span> <span class="token function">zipTag</span><span class="token punctuation">(</span>strings<span class="token punctuation">,</span> <span class="token operator">...</span>expressions<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> strings<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">+</span> expressions<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token punctuation">(</span>e<span class="token punctuation">,</span> i<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token template-string"><span class="token string">`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>e<span class="token interpolation-punctuation punctuation">}</span></span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>strings<span class="token punctuation">[</span>i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">`</span></span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token string">''</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token keyword">let</span> untaggedResult <span class="token operator">=</span> <span class="token template-string"><span class="token string">`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span> a <span class="token interpolation-punctuation punctuation">}</span></span><span class="token string"> + </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span> b <span class="token interpolation-punctuation punctuation">}</span></span><span class="token string"> = </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span> a <span class="token operator">+</span> b <span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">`</span></span><span class="token keyword">let</span> taggedResult <span class="token operator">=</span> zipTag<span class="token template-string"><span class="token string">`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span> a <span class="token interpolation-punctuation punctuation">}</span></span><span class="token string"> + </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span> b <span class="token interpolation-punctuation punctuation">}</span></span><span class="token string"> = </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span> a <span class="token operator">+</span> b <span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">`</span></span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>untaggedResult<span class="token punctuation">)</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>taggedResult<span class="token punctuation">)</span></code></pre><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">// symbol</span><span class="token comment" spellcheck="true">// Symbol.isConcatSpreadable + Array.prototype.concat()</span><span class="token comment" spellcheck="true">// 数组对象、类数组对象、非类数组对象在Symbol.isConcatSpreadable为false的时候会被追加到数组末尾； true时，数组对象、类数组对象都被打平到数组实例，非类数组对象则被忽略</span><span class="token keyword">let</span> initial <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'foo'</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token keyword">let</span> array <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'bar'</span><span class="token punctuation">]</span><span class="token punctuation">;</span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>array<span class="token punctuation">[</span>Symbol<span class="token punctuation">.</span>isConcatSpreadable<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// undefined </span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>initial<span class="token punctuation">.</span><span class="token function">concat</span><span class="token punctuation">(</span>array<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// ['foo', 'bar'] </span>array<span class="token punctuation">[</span>Symbol<span class="token punctuation">.</span>isConcatSpreadable<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>initial<span class="token punctuation">.</span><span class="token function">concat</span><span class="token punctuation">(</span>array<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// ['foo', Array(1)]</span><span class="token keyword">let</span> arrayLikeObject <span class="token operator">=</span> <span class="token punctuation">{</span> length<span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">:</span> <span class="token string">'baz'</span> <span class="token punctuation">}</span><span class="token punctuation">;</span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arrayLikeObject<span class="token punctuation">[</span>Symbol<span class="token punctuation">.</span>isConcatSpreadable<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// undefined </span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>initial<span class="token punctuation">.</span><span class="token function">concat</span><span class="token punctuation">(</span>arrayLikeObject<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// ['foo', {...}] </span>arrayLikeObject<span class="token punctuation">[</span>Symbol<span class="token punctuation">.</span>isConcatSpreadable<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>initial<span class="token punctuation">.</span><span class="token function">concat</span><span class="token punctuation">(</span>arrayLikeObject<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// ['foo', 'baz'] </span><span class="token keyword">let</span> otherObject <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Set</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">'qux'</span><span class="token punctuation">)</span><span class="token punctuation">;</span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>otherObject<span class="token punctuation">[</span>Symbol<span class="token punctuation">.</span>isConcatSpreadable<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// undefined </span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>initial<span class="token punctuation">.</span><span class="token function">concat</span><span class="token punctuation">(</span>otherObject<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// ['foo', Set(1)] </span>otherObject<span class="token punctuation">[</span>Symbol<span class="token punctuation">.</span>isConcatSpreadable<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>initial<span class="token punctuation">.</span><span class="token function">concat</span><span class="token punctuation">(</span>otherObject<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// ['foo']</span></code></pre><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">// yield</span><span class="token keyword">function</span><span class="token operator">*</span> <span class="token function">test</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">var</span> y <span class="token operator">=</span> <span class="token number">2</span> <span class="token operator">*</span> <span class="token punctuation">(</span><span class="token keyword">yield</span> <span class="token punctuation">(</span>x <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token keyword">var</span> z <span class="token operator">=</span> <span class="token keyword">yield</span> <span class="token punctuation">(</span>y <span class="token operator">+</span> <span class="token number">3</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> <span class="token punctuation">(</span>x <span class="token operator">+</span> y <span class="token operator">+</span> z<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token function">test</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span>a<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// {value: 6, done: false}</span>a<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// {value: NaN, done: false}</span>a<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// {value: NaN, done: true}</span><span class="token keyword">var</span> b <span class="token operator">=</span> <span class="token function">test</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span>b<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// {value: 6, done: false}</span><span class="token comment" spellcheck="true">// 注意next()内的传参 = 上一次yield expression的值</span>b<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token number">12</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// {value: 8, done: false}</span><span class="token comment" spellcheck="true">// y = 2 * 12</span>b<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token number">13</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// {value: 42, done: true}</span><span class="token comment" spellcheck="true">// z = 13</span></code></pre><h3 id="操作符"><a href="#操作符" class="headerlink" title="操作符"></a>操作符</h3><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">// ++ / -- </span><span class="token comment" spellcheck="true">// 前： 代表先执行运算再赋值</span><span class="token comment" spellcheck="true">// 后： 代表先赋值再运算</span><span class="token comment" spellcheck="true">// example</span><span class="token keyword">let</span> num <span class="token operator">=</span> <span class="token number">3</span><span class="token keyword">let</span> num1 <span class="token operator">=</span> num<span class="token operator">--</span> <span class="token operator">+</span> <span class="token number">1</span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>num1<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// 4</span><span class="token keyword">let</span> num2 <span class="token operator">=</span> <span class="token number">3</span><span class="token keyword">let</span> num3 <span class="token operator">=</span> <span class="token operator">--</span>num2 <span class="token operator">+</span> <span class="token number">1</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>num3<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// 3</span></code></pre><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">// 计算二进制的负值</span><span class="token comment" spellcheck="true">// example</span><span class="token comment" spellcheck="true">// 十进制18的二进制表示方法</span><span class="token comment" spellcheck="true">// 0000 0000 0000 0000 0000 0000 0001 0010</span><span class="token comment" spellcheck="true">// 反转（计算补数）</span><span class="token comment" spellcheck="true">// 1111 1111 1111 1111 1111 1111 1110 1101</span><span class="token comment" spellcheck="true">//给补数加1（下面的就是-18的二进制表示方法）</span><span class="token comment" spellcheck="true">// 1111 1111 1111 1111 1111 1111 1110 1110</span><span class="token comment" spellcheck="true">// 无符号整数比有符号整数的范围更大，因为第32位被用来表示数值了</span></code></pre><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">// Math.pow()对应的操作符为 **(指数操作符)</span><span class="token comment" spellcheck="true">// Math.pow(3, 2) == 3 ** 2</span><span class="token comment" spellcheck="true">// 指数赋值操作符 **=</span><span class="token keyword">let</span> a <span class="token operator">=</span> <span class="token number">3</span>a <span class="token operator">**</span><span class="token operator">=</span> <span class="token number">2</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// 9</span></code></pre><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">// 关系操作符&lt; > &lt;= >=</span><span class="token comment" spellcheck="true">// 注意：两个类型为String的比较时，不会转换为Number再比较，而是依次比较每一位的unicode编码大小</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"23"</span> <span class="token operator">&lt;</span> <span class="token string">"3"</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// true</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"23"</span> <span class="token operator">&lt;</span> <span class="token number">3</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// false</span><span class="token comment" spellcheck="true">// 注意：NaN与任何值比较都返回false</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">NaN</span> <span class="token operator">&lt;</span> <span class="token number">3</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// false</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">NaN</span> <span class="token operator">>=</span> <span class="token number">3</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// false</span></code></pre><h2 id="3-变量、作用域与内存"><a href="#3-变量、作用域与内存" class="headerlink" title="3. 变量、作用域与内存"></a>3. 变量、作用域与内存</h2><h3 id="3-1-原始值与引用值"><a href="#3-1-原始值与引用值" class="headerlink" title="3.1 原始值与引用值"></a>3.1 原始值与引用值</h3><p>简单数据类型（String、Number、Boolean、Undefined、Null、Symbol）是按值传递；</p><p>复杂数据类型（Object）是按引用传递；</p><p>函数的参数是按值传递的。</p><h3 id="3-2-垃圾回收"><a href="#3-2-垃圾回收" class="headerlink" title="3.2 垃圾回收"></a>3.2 垃圾回收</h3><p>1：标记清理</p><p>垃圾回收程序运行的时候，会标记内存中存储的所有变量（记住，标记方法有很多种）。然后，它会将所有在上下文中的变量，以及被在上下文中的变量引用的变量的标记去掉。在此之后再被加上标记的变量就是待删除的了，原因是任何在上下文中的变量都访问不到它们了。随后垃圾回收程序做一次内存清理，销毁带标记的所有值并收回它们的内存。</p><p>2: 引用计数</p><p>对每个值都记录它被引用的次数。声明变量并给它赋一个引用值时，这个值的引用数为 1。如果同一个值又被赋给另一个变量，那么引用数加 1。类似地，如果保存对该值引用的变量被其他值给覆盖了，那么引用数减 1。当一个值的引用数为 0 时，就说明没办法再访问到这个值了，因此可以安全地收回其内存了。垃圾回收程序下次运行的时候就会释放引用数为 0 的值的内存。</p><p>缺点：循环引用；解决办法：改用标记清理</p><p><img src="https://s2.loli.net/2022/10/26/GP3lcAO79Qzapju.png" alt="image-20221026181255471.png"></p><h2 id="4-基本引用类型"><a href="#4-基本引用类型" class="headerlink" title="4.基本引用类型"></a>4.基本引用类型</h2><h3 id="4-1-Date"><a href="#4-1-Date" class="headerlink" title="4.1 Date"></a>4.1 Date</h3><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">// Date类型的valueof()方法不返回字符串，返回的是被重写后的时期的毫秒数。</span><span class="token comment" spellcheck="true">// 因此操作符可以直接使用Date类型的值来比较日期先后</span><span class="token keyword">let</span> date1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token number">2019</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// 2019年1月1日</span><span class="token keyword">let</span> date2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token number">2019</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// 2019年2月1日</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>date1 <span class="token operator">&lt;</span> date2<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// true</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>date1 <span class="token operator">></span> date2<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// false</span><span class="token comment" spellcheck="true">// Date类型的getTimezoneOffset()可返回以分钟计的UTC与本地时区的偏移量</span><span class="token keyword">let</span> now <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>now<span class="token punctuation">.</span><span class="token function">getTimezoneOffset</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// -480 代表比UTC时间快480分钟</span></code></pre><h3 id="4-2-原始值包装类型Boolean"><a href="#4-2-原始值包装类型Boolean" class="headerlink" title="4.2 原始值包装类型Boolean"></a>4.2 原始值包装类型Boolean</h3><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">// 所有对象在布尔表达式中在会转为true</span><span class="token keyword">let</span> falseObj <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Boolean</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token keyword">let</span> result <span class="token operator">=</span> falseObj <span class="token operator">&amp;&amp;</span> <span class="token boolean">true</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// true</span></code></pre><h3 id="4-3-原始值包装类型的String"><a href="#4-3-原始值包装类型的String" class="headerlink" title="4.3 原始值包装类型的String"></a>4.3 原始值包装类型的String</h3><p>let stringValue = ‘hello world’</p><table><thead><tr><th align="center"></th><th align="center">参数为正数</th><th align="center">参数为负数</th></tr></thead><tbody><tr><td align="center">slice()</td><td align="center">（startIndex, endIndex）<br>stringValue.slice(3, 7) → ‘lo w’</td><td align="center">正常行为<br>stringValue.slice(3, -4) → ‘lo w’</td></tr><tr><td align="center">substr()</td><td align="center">（startIndex, 返回的字符串长度）<br>stringValue.substr(3, 7) → ‘lo worl’</td><td align="center">参数1（字符串长度+该值），参数2（转为0）<br>stringValue.substr(3， -4) → ‘empty string’</td></tr><tr><td align="center">substring()</td><td align="center">（startIndex, endIndex）<br>stringValue.slice(3, 7) → ‘lo w’</td><td align="center">都转为0<br>stringValue.substr(3， -4) → ‘hel’</td></tr></tbody></table><h2 id="5-继承"><a href="#5-继承" class="headerlink" title="5. 继承"></a>5. 继承</h2><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">// 原型与实例的关系</span><span class="token comment" spellcheck="true">// 1.可通过instanceof来确定</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token punctuation">[</span>实例<span class="token punctuation">]</span> <span class="token keyword">instanceof</span> <span class="token punctuation">[</span>原型<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">// true: 代表原型在实例的原型链上出现过; 反之</span><span class="token comment" spellcheck="true">// 2.可通过isPrototypeOf()来确定， 由原型调用</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token punctuation">[</span>原型<span class="token punctuation">]</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function">isPrototypeOf</span><span class="token punctuation">(</span><span class="token punctuation">[</span>实例<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">// true: 代表实例的原型链上包含此原型; 反之</span></code></pre><ul><li><p>子类需要覆盖父类的方法或增加父类没有的方法， 需要在原型赋值后再执行操作</p><pre class=" language-js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">SuperType</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">this</span><span class="token punctuation">.</span>property <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span> <span class="token punctuation">}</span> SuperType<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>getSuperValue <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>property<span class="token punctuation">;</span> <span class="token punctuation">}</span><span class="token punctuation">;</span> <span class="token keyword">function</span> <span class="token function">SubType</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">this</span><span class="token punctuation">.</span>subproperty <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span> <span class="token punctuation">}</span> <span class="token comment" spellcheck="true">// 继承 SuperType </span>SubType<span class="token punctuation">.</span>prototype <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SuperType</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 新方法</span>SubType<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>getSubValue <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>subproperty<span class="token punctuation">;</span> <span class="token punctuation">}</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 覆盖已有的方法</span>SubType<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>getSuperValue <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span> <span class="token punctuation">}</span><span class="token punctuation">;</span> <span class="token keyword">let</span> instance <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SubType</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>instance<span class="token punctuation">.</span><span class="token function">getSuperValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// false</span></code></pre></li><li><p>以对象字面量的方式创建原型方法会破坏之前的原型</p><pre class=" language-js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">SuperType</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">this</span><span class="token punctuation">.</span>property <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span> <span class="token punctuation">}</span> SuperType<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>getSuperValue <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>property<span class="token punctuation">;</span> <span class="token punctuation">}</span><span class="token punctuation">;</span> <span class="token keyword">function</span> <span class="token function">SubType</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">this</span><span class="token punctuation">.</span>subproperty <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span> <span class="token punctuation">}</span><span class="token comment" spellcheck="true">// 继承 SuperType </span>SubType<span class="token punctuation">.</span>prototype <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SuperType</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 通过对象字面量添加新方法，这会导致上一行无效</span>SubType<span class="token punctuation">.</span>prototype <span class="token operator">=</span> <span class="token punctuation">{</span>  <span class="token function">getSubValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>subproperty<span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token function">someOtherMethod</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span> <span class="token punctuation">}</span><span class="token punctuation">;</span> <span class="token keyword">let</span> instance <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SubType</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>instance<span class="token punctuation">.</span><span class="token function">getSuperValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 出错！</span></code></pre></li></ul><h3 id="5-1-原型链问题"><a href="#5-1-原型链问题" class="headerlink" title="5.1 原型链问题"></a>5.1 原型链问题</h3><ul><li><p>原型链中的引用值会在所有实例间共享</p><pre class=" language-js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">SuperType</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">this</span><span class="token punctuation">.</span>colors <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">"red"</span><span class="token punctuation">,</span> <span class="token string">"blue"</span><span class="token punctuation">,</span> <span class="token string">"green"</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token punctuation">}</span> <span class="token keyword">function</span> <span class="token function">SubType</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span> <span class="token comment" spellcheck="true">// 继承 SuperType </span>SubType<span class="token punctuation">.</span>prototype <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SuperType</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token keyword">let</span> instance1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SubType</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> instance1<span class="token punctuation">.</span>colors<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token string">"black"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>instance1<span class="token punctuation">.</span>colors<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// "red,blue,green,black" </span><span class="token keyword">let</span> instance2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SubType</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>instance2<span class="token punctuation">.</span>colors<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// "red,blue,green,black"</span></code></pre></li><li><p>原型链的第二个问题是，子类型在实例化时不能给父类型的构造函数传参。事实上，我们无法在不 影响所有对象实例的情况下把参数传进父类的构造函数。再加上之前提到的原型中包含引用值的问题， 就导致原型链基本不会被单独使用。</p></li></ul><h3 id="5-2-继承方式"><a href="#5-2-继承方式" class="headerlink" title="5.2 继承方式"></a>5.2 继承方式</h3><ol><li><p>盗用构造函数（也叫对象伪装/经典继承）</p><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">// 实现思路：在子类构造函数中调用父类构造函数</span><span class="token keyword">function</span> <span class="token function">SuperType</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">this</span><span class="token punctuation">.</span>colors <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">"red"</span><span class="token punctuation">,</span> <span class="token string">"blue"</span><span class="token punctuation">,</span> <span class="token string">"green"</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token punctuation">}</span> <span class="token keyword">function</span> <span class="token function">SubType</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">// 使用apply()/call()继承 SuperType </span> SuperType<span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span> <span class="token keyword">let</span> instance1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SubType</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> instance1<span class="token punctuation">.</span>colors<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token string">"black"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>instance1<span class="token punctuation">.</span>colors<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// "red,blue,green,black" </span><span class="token keyword">let</span> instance2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SubType</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>instance2<span class="token punctuation">.</span>colors<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// "red,blue,green" </span><span class="token comment" spellcheck="true">// 优点: 在子类构造函数中向父类构造函数传参</span><span class="token keyword">function</span> <span class="token function">SuperType</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span> <span class="token punctuation">}</span> <span class="token keyword">function</span> <span class="token function">SubType</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">// 继承 SuperType 并传参</span> SuperType<span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> <span class="token string">"Nicholas"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// 实例属性</span> <span class="token keyword">this</span><span class="token punctuation">.</span>age <span class="token operator">=</span> <span class="token number">29</span><span class="token punctuation">;</span> <span class="token punctuation">}</span> <span class="token keyword">let</span> instance <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SubType</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>instance<span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// "Nicholas"; </span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>instance<span class="token punctuation">.</span>age<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 29</span><span class="token comment" spellcheck="true">// 缺点：盗用构造函数的主要缺点，也是使用构造函数模式自定义类型的问题：必须在构造函数中定义方法，因此函数不能重用。此外，子类也不能访问父类原型上定义的方法，因此所有类型只能使用构造函数模式。由于存在这些问题，盗用构造函数基本上也不能单独使用。</span></code></pre></li><li><p>组合继承（也叫伪经典继承）</p><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">// 实现思路：使用原型链继承原型上的属性和方法，而通过盗用构造函数继承实例属性</span><span class="token keyword">function</span> <span class="token function">SuperType</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>  <span class="token keyword">this</span><span class="token punctuation">.</span>colors <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">"red"</span><span class="token punctuation">,</span> <span class="token string">"blue"</span><span class="token punctuation">,</span> <span class="token string">"green"</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token punctuation">}</span> SuperType<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>sayName <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span><span class="token punctuation">;</span> <span class="token keyword">function</span> <span class="token function">SubType</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span> age<span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">// 继承属性</span> SuperType<span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> name<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">this</span><span class="token punctuation">.</span>age <span class="token operator">=</span> age<span class="token punctuation">;</span> <span class="token punctuation">}</span> <span class="token comment" spellcheck="true">// 继承方法</span>SubType<span class="token punctuation">.</span>prototype <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SuperType</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> SubType<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>sayAge <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>age<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span><span class="token punctuation">;</span> <span class="token keyword">let</span> instance1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SubType</span><span class="token punctuation">(</span><span class="token string">"Nicholas"</span><span class="token punctuation">,</span> <span class="token number">29</span><span class="token punctuation">)</span><span class="token punctuation">;</span> instance1<span class="token punctuation">.</span>colors<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token string">"black"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>instance1<span class="token punctuation">.</span>colors<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// "red,blue,green,black" </span>instance1<span class="token punctuation">.</span><span class="token function">sayName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// "Nicholas"; </span>instance1<span class="token punctuation">.</span><span class="token function">sayAge</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 29 </span><span class="token keyword">let</span> instance2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SubType</span><span class="token punctuation">(</span><span class="token string">"Greg"</span><span class="token punctuation">,</span> <span class="token number">27</span><span class="token punctuation">)</span><span class="token punctuation">;</span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>instance2<span class="token punctuation">.</span>colors<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// "red,blue,green" </span>instance2<span class="token punctuation">.</span><span class="token function">sayName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// "Greg"; </span>instance2<span class="token punctuation">.</span><span class="token function">sayAge</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 27</span><span class="token comment" spellcheck="true">// 优点: 弥补了原型链和盗用构造函数的不足，是 JavaScript 中使用最多的继承模式。而且组合继承也保留了 instanceof 操作符和 isPrototypeOf()方法识别合成对象的能力。</span><span class="token comment" spellcheck="true">// 缺点: 最主要的效率问题就是父类构造函数始终会被调用两次：一次在是创建子类原型时调用，另一次是在子类构造函数中调用。</span></code></pre></li><li><p>原型式继承</p><pre class=" language-js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">object</span><span class="token punctuation">(</span>o<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">function</span> <span class="token function">F</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>  F<span class="token punctuation">.</span>prototype <span class="token operator">=</span> o<span class="token punctuation">;</span>  <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">F</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span> <span class="token comment" spellcheck="true">// 这个 object()函数会创建一个临时构造函数，将传入的对象赋值给这个构造函数的原型，然后返回这个临时类型的一个实例。本质上，object()是对传入的对象执行了一次浅复制。来看下面的例子：</span><span class="token keyword">let</span> person <span class="token operator">=</span> <span class="token punctuation">{</span>  name<span class="token punctuation">:</span> <span class="token string">"Nicholas"</span><span class="token punctuation">,</span>  friends<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">"Shelby"</span><span class="token punctuation">,</span> <span class="token string">"Court"</span><span class="token punctuation">,</span> <span class="token string">"Van"</span><span class="token punctuation">]</span> <span class="token punctuation">}</span><span class="token punctuation">;</span> <span class="token keyword">let</span> anotherPerson <span class="token operator">=</span> <span class="token function">object</span><span class="token punctuation">(</span>person<span class="token punctuation">)</span><span class="token punctuation">;</span> anotherPerson<span class="token punctuation">.</span>name <span class="token operator">=</span> <span class="token string">"Greg"</span><span class="token punctuation">;</span> anotherPerson<span class="token punctuation">.</span>friends<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token string">"Rob"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token keyword">let</span> yetAnotherPerson <span class="token operator">=</span> <span class="token function">object</span><span class="token punctuation">(</span>person<span class="token punctuation">)</span><span class="token punctuation">;</span> yetAnotherPerson<span class="token punctuation">.</span>name <span class="token operator">=</span> <span class="token string">"Linda"</span><span class="token punctuation">;</span> yetAnotherPerson<span class="token punctuation">.</span>friends<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token string">"Barbie"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>person<span class="token punctuation">.</span>friends<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// "Shelby,Court,Van,Rob,Barbie" </span><span class="token comment" spellcheck="true">// 使用场景： 你有一个对象，想在它的基础上再创建一个新对象。你需要把这个对象先传给 object()，然后再对返回的对象进行适当修改。</span><span class="token comment" spellcheck="true">// ECMAScript 5 通过增加 Object.create()方法将原型式继承的概念规范化了。这个方法接收两个参数：作为新对象原型的对象，以及给新对象定义额外属性的对象（第二个可选）。在只有一个参数时，Object.create()与这里的 object()方法效果相同：</span><span class="token keyword">let</span> person <span class="token operator">=</span> <span class="token punctuation">{</span>  name<span class="token punctuation">:</span> <span class="token string">"Nicholas"</span><span class="token punctuation">,</span>  friends<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">"Shelby"</span><span class="token punctuation">,</span> <span class="token string">"Court"</span><span class="token punctuation">,</span> <span class="token string">"Van"</span><span class="token punctuation">]</span> <span class="token punctuation">}</span><span class="token punctuation">;</span> <span class="token keyword">let</span> anotherPerson <span class="token operator">=</span> Object<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span>person<span class="token punctuation">)</span><span class="token punctuation">;</span> anotherPerson<span class="token punctuation">.</span>name <span class="token operator">=</span> <span class="token string">"Greg"</span><span class="token punctuation">;</span> anotherPerson<span class="token punctuation">.</span>friends<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token string">"Rob"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token keyword">let</span> yetAnotherPerson <span class="token operator">=</span> Object<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span>person<span class="token punctuation">)</span><span class="token punctuation">;</span> yetAnotherPerson<span class="token punctuation">.</span>name <span class="token operator">=</span> <span class="token string">"Linda"</span><span class="token punctuation">;</span> yetAnotherPerson<span class="token punctuation">.</span>friends<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token string">"Barbie"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>person<span class="token punctuation">.</span>friends<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// "Shelby,Court,Van,Rob,Barbie" </span><span class="token comment" spellcheck="true">// Object.create()的第二个参数与 Object.defineProperties()的第二个参数一样：每个新增属性都通过各自的描述符来描述。以这种方式添加的属性会遮蔽原型对象上的同名属性。比如：</span><span class="token keyword">let</span> person <span class="token operator">=</span> <span class="token punctuation">{</span>  name<span class="token punctuation">:</span> <span class="token string">"Nicholas"</span><span class="token punctuation">,</span>  friends<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">"Shelby"</span><span class="token punctuation">,</span> <span class="token string">"Court"</span><span class="token punctuation">,</span> <span class="token string">"Van"</span><span class="token punctuation">]</span> <span class="token punctuation">}</span><span class="token punctuation">;</span> <span class="token keyword">let</span> anotherPerson <span class="token operator">=</span> Object<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span>person<span class="token punctuation">,</span> <span class="token punctuation">{</span>  name<span class="token punctuation">:</span> <span class="token punctuation">{</span>  value<span class="token punctuation">:</span> <span class="token string">"Greg"</span>  <span class="token punctuation">}</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>anotherPerson<span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// "Greg"</span><span class="token comment" spellcheck="true">// 注意: 原型式继承非常适合不需要单独创建构造函数，但仍然需要在对象间共享信息的场合。但要记住，属性中包含的引用值始终会在相关对象间共享，跟使用原型模式是一样的。</span></code></pre></li><li><p>寄生式继承</p><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">// 实现思路: 类似于寄生构造函数和工厂模式：创建一个实现继承的函数，以某种方式增强对象，然后返回这个对象。</span><span class="token keyword">function</span> <span class="token function">object</span><span class="token punctuation">(</span>o<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">function</span> <span class="token function">F</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>  F<span class="token punctuation">.</span>prototype <span class="token operator">=</span> o<span class="token punctuation">;</span>  <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">F</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span> <span class="token keyword">function</span> <span class="token function">createAnother</span><span class="token punctuation">(</span>original<span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token keyword">let</span> clone <span class="token operator">=</span> <span class="token function">object</span><span class="token punctuation">(</span>original<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 通过调用函数创建一个新对象</span> clone<span class="token punctuation">.</span>sayHi <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment" spellcheck="true">// 以某种方式增强这个对象</span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"hi"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> clone<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 返回这个对象</span><span class="token punctuation">}</span><span class="token keyword">let</span> person <span class="token operator">=</span> <span class="token punctuation">{</span>  name<span class="token punctuation">:</span> <span class="token string">"Nicholas"</span><span class="token punctuation">,</span>  friends<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">"Shelby"</span><span class="token punctuation">,</span> <span class="token string">"Court"</span><span class="token punctuation">,</span> <span class="token string">"Van"</span><span class="token punctuation">]</span> <span class="token punctuation">}</span><span class="token punctuation">;</span> <span class="token keyword">let</span> anotherPerson <span class="token operator">=</span> <span class="token function">createAnother</span><span class="token punctuation">(</span>person<span class="token punctuation">)</span><span class="token punctuation">;</span> anotherPerson<span class="token punctuation">.</span><span class="token function">sayHi</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// "hi" </span><span class="token comment" spellcheck="true">// 寄生式继承同样适合主要关注对象，而不在乎类型和构造函数的场景。object()函数不是寄生式继承所必需的，任何返回新对象的函数都可以在这里使用。</span><span class="token comment" spellcheck="true">// 注意: 通过寄生式继承给对象添加函数会导致函数难以重用，与构造函数模式类似。</span></code></pre></li><li><p>寄生式组合继承</p><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">// 解决组合继承的缺点：父类构造函数始终会被调用两次</span><span class="token comment" spellcheck="true">// 基本思路是不通过调用父类构造函数给子类原型赋值，而是取得父类原型的一个副本。说到底就是使用寄生式继承来继承父类原型，然后将返回的新对象赋值给子类原型。</span><span class="token comment" spellcheck="true">// 这个函数接收两个参数：子类构造函数和父类构造函数。在这个函数内部，第一步是创建父类原型的一个副本。然后，给返回的prototype 对象设置 constructor 属性，解决由于重写原型导致默认 constructor 丢失的问题。最后将新创建的对象赋值给子类型的原型。</span><span class="token keyword">function</span> <span class="token function">inheritPrototype</span><span class="token punctuation">(</span>subType<span class="token punctuation">,</span> superType<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">let</span> prototype <span class="token operator">=</span> <span class="token function">object</span><span class="token punctuation">(</span>superType<span class="token punctuation">.</span>prototype<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 创建对象</span> prototype<span class="token punctuation">.</span>constructor <span class="token operator">=</span> subType<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 增强对象 </span> subType<span class="token punctuation">.</span>prototype <span class="token operator">=</span> prototype<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 赋值对象</span><span class="token punctuation">}</span> <span class="token keyword">function</span> <span class="token function">SuperType</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>  <span class="token keyword">this</span><span class="token punctuation">.</span>colors <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">"red"</span><span class="token punctuation">,</span> <span class="token string">"blue"</span><span class="token punctuation">,</span> <span class="token string">"green"</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token punctuation">}</span> SuperType<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>sayName <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span><span class="token punctuation">;</span> <span class="token keyword">function</span> <span class="token function">SubType</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span> age<span class="token punctuation">)</span> <span class="token punctuation">{</span>  SuperType<span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> name<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">this</span><span class="token punctuation">.</span>age <span class="token operator">=</span> age<span class="token punctuation">;</span> <span class="token punctuation">}</span> <span class="token function">inheritPrototype</span><span class="token punctuation">(</span>SubType<span class="token punctuation">,</span> SuperType<span class="token punctuation">)</span><span class="token punctuation">;</span> SubType<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>sayAge <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>age<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 这里只调用了一次 SuperType 构造函数，避免了 SubType.prototype 上不必要也用不到的属性，因此可以说这个例子的效率更高。而且，原型链仍然保持不变，因此 instanceof 操作符和isPrototypeOf()方法正常有效。寄生式组合继承可以算是引用类型继承的最佳模式。</span></code></pre></li></ol>]]></content>
      
      
      <categories>
          
          <category> JS </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Vue</title>
      <link href="/2022/10/23/vue/"/>
      <url>/2022/10/23/vue/</url>
      
        <content type="html"><![CDATA[<h1 id="vue"><a href="#vue" class="headerlink" title="vue"></a>vue</h1><h2 id="1-基本原理"><a href="#1-基本原理" class="headerlink" title="1.基本原理"></a>1.基本原理</h2><p>在初始化实例中，会创建一个Observe对象，在这个对象中会通过Object.defineProperty（vue3 使用的是 proxy）来监视和劫持data中所有层级的属性，它还会为每个属性定义一个响应式的getter和setter，在响应式getter中会创建一个dep对象和watcher对象，dep对象则是收集使用到该属性的所有watcher，而watcher对象相当于对该属性进行订阅。那么在初始化模板编译的时候，响应式的getter会被调用，dep对象收集到相关依赖；之后在属性更新时，响应式的setter会通过dep对象向每个watcher通知，watcher就会执行更新函数进行更新视图。</p>]]></content>
      
      
      <categories>
          
          <category> Vue </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Vue </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ES6</title>
      <link href="/2022/10/21/es6/"/>
      <url>/2022/10/21/es6/</url>
      
        <content type="html"><![CDATA[<h1 id="ES6"><a href="#ES6" class="headerlink" title="ES6"></a>ES6</h1><h2 id="1-转译"><a href="#1-转译" class="headerlink" title="1. 转译"></a>1. 转译</h2><p><a href="https://babeljs.io/">Babel</a> 是一个广泛使用的 ES6 转码器，可以将 ES6 代码转为 ES5 代码，从而在老版本的浏览器执行</p><pre class=" language-shell"><code class="language-shell">npm install --save-dev @babel/core</code></pre><ol><li><p>配置文件.babelrc</p><p>```shell</p></li></ol><h1 id="最新转码规则"><a href="#最新转码规则" class="headerlink" title="最新转码规则"></a>最新转码规则</h1><p>   $ npm install –save-dev @babel/preset-env</p><h1 id="react-转码规则"><a href="#react-转码规则" class="headerlink" title="react 转码规则"></a>react 转码规则</h1><p>   $ npm install –save-dev @babel/preset-react</p><pre><code>```js// .babelrc{   "presets": [     "@babel/env",     "@babel/preset-react"   ],   "plugins": [] }</code></pre><ol start="2"><li><p>命令行转译</p><p>```shell<br>$ npm install –save-dev @babel/cli</p></li></ol><h1 id="基本用法"><a href="#基本用法" class="headerlink" title="基本用法"></a>基本用法</h1><h1 id="转码结果输出到标准输出"><a href="#转码结果输出到标准输出" class="headerlink" title="转码结果输出到标准输出"></a>转码结果输出到标准输出</h1><p>   $ npx babel example.js</p><h1 id="转码结果写入一个文件"><a href="#转码结果写入一个文件" class="headerlink" title="转码结果写入一个文件"></a>转码结果写入一个文件</h1><h1 id="–out-file-或-o-参数指定输出文件"><a href="#–out-file-或-o-参数指定输出文件" class="headerlink" title="–out-file 或 -o 参数指定输出文件"></a>–out-file 或 -o 参数指定输出文件</h1><p>   $ npx babel example.js –out-file compiled.js</p><h1 id="或者"><a href="#或者" class="headerlink" title="或者"></a>或者</h1><p>   $ npx babel example.js -o compiled.js</p><h1 id="整个目录转码"><a href="#整个目录转码" class="headerlink" title="整个目录转码"></a>整个目录转码</h1><h1 id="–out-dir-或-d-参数指定输出目录"><a href="#–out-dir-或-d-参数指定输出目录" class="headerlink" title="–out-dir 或 -d 参数指定输出目录"></a>–out-dir 或 -d 参数指定输出目录</h1><p>   $ npx babel src –out-dir lib</p><h1 id="或者-1"><a href="#或者-1" class="headerlink" title="或者"></a>或者</h1><p>   $ npx babel src -d lib</p><h1 id="s-参数生成source-map文件"><a href="#s-参数生成source-map文件" class="headerlink" title="-s 参数生成source map文件"></a>-s 参数生成source map文件</h1><p>   $ npx babel src -d lib -s</p><pre><code>3. 直接运行es6脚本```shell$ npm install --save-dev @babel/node# 假设test.js文件# console.log((x =&gt; x * 2)())# 运行npx babel-node test.js2</code></pre><ol start="4"><li><p>@babel/register模块</p><p><code>@babel/register</code>模块改写<code>require</code>命令，为它加上一个钩子。此后，每当使用<code>require</code>加载<code>.js</code>、<code>.jsx</code>、<code>.es</code>和<code>.es6</code>后缀名的文件，就会先用 Babel 进行转码。</p><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">// index.js</span><span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'@babel/register'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'./es6.js'</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>```shell<br>$ npm install –save-dev @babel/register</p></li></ol><h1 id="usage"><a href="#usage" class="headerlink" title="usage"></a>usage</h1><p>   $ node index.js</p><h1 id="需要注意的是，-babel-x2F-register只会对require命令加载的文件转码，而不会对当前文件转码。另外，由于它是实时转码，所以只适合在开发环境使用。"><a href="#需要注意的是，-babel-x2F-register只会对require命令加载的文件转码，而不会对当前文件转码。另外，由于它是实时转码，所以只适合在开发环境使用。" class="headerlink" title="需要注意的是，@babel/register只会对require命令加载的文件转码，而不会对当前文件转码。另外，由于它是实时转码，所以只适合在开发环境使用。"></a>需要注意的是，@babel/register只会对require命令加载的文件转码，而不会对当前文件转码。另外，由于它是实时转码，所以只适合在开发环境使用。</h1><pre><code>5. polyfillBabel 默认只转换新的 JavaScript 句法（syntax），而不转换新的 API，比如`Iterator`、`Generator`、`Set`、`Map`、`Proxy`、`Reflect`、`Symbol`、`Promise`等全局对象，以及一些定义在全局对象上的方法（比如`Object.assign`）都不会转码。举例来说，ES6 在`Array`对象上新增了`Array.from`方法。Babel 就不会转码这个方法。如果想让这个方法运行，可以使用`core-js`和`regenerator-runtime`(后者提供generator函数的转码)，为当前环境提供一个垫片。```shell$ npm install --save-dev core-js regenerator-runtime</code></pre><pre class=" language-js"><code class="language-js"><span class="token keyword">import</span> <span class="token string">'core-js'</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token string">'regenerator-runtime/runtime'</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 或者</span><span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'core-js'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'regenerator-runtime/runtime'</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><ol start="6"><li><p>浏览器环境</p><p>Babel 也可以用于浏览器环境，使用<a href="https://babeljs.io/docs/en/next/babel-standalone.html">@babel/standalone</a>模块提供的浏览器版本，将其插入网页。</p></li></ol><pre class=" language-js"><code class="language-js"><span class="token operator">&lt;</span>script src<span class="token operator">=</span><span class="token string">"https://unpkg.com/@babel/standalone/babel.min.js"</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span><span class="token operator">&lt;</span>script type<span class="token operator">=</span><span class="token string">"text/babel"</span><span class="token operator">></span><span class="token comment" spellcheck="true">// Your ES6 code</span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span></code></pre><p>注意，网页实时将 ES6 代码转为 ES5，对性能会有影响。生产环境需要加载已经转码完成的脚本。</p><p>Babel 提供一个<a href="https://babeljs.io/repl/">REPL 在线编译器</a>，可以在线将 ES6 代码转为 ES5 代码。转换后的代码，可以直接作为 ES5 代码插入网页运行。</p><h2 id="2-let和const"><a href="#2-let和const" class="headerlink" title="2. let和const"></a>2. let和const</h2><h3 id="let"><a href="#let" class="headerlink" title="let"></a>let</h3><ul><li><p>声明的变量仅在let命令所在的代码块内有效</p></li><li><p>不存在变量提升</p></li><li><p>暂时性死区</p><pre class=" language-js"><code class="language-js"><span class="token keyword">var</span> tmp <span class="token operator">=</span> <span class="token number">123</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// ES6 明确规定，如果区块中存在let和const命令，这个区块对这些命令声明的变量，从一开始就形成了封闭作用域。凡是在声明之前就使用这些变量，就会报错。</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  tmp <span class="token operator">=</span> <span class="token string">'abc'</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// ReferenceError</span>  <span class="token keyword">let</span> tmp<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// let 绑定在if里面的块级作用域，那么在声明前使用就会报错</span><span class="token punctuation">}</span></code></pre><p>缺点：</p><pre class=" language-js"><code class="language-js"><span class="token keyword">typeof</span> x<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// ReferenceError   typeof不再是一个百分百安全的操作</span><span class="token keyword">let</span> x<span class="token punctuation">;</span><span class="token comment" spellcheck="true">// compare</span><span class="token keyword">typeof</span> y <span class="token comment" spellcheck="true">// undefined,但不会报错</span></code></pre></li><li><p>不允许重复声明</p></li></ul><h3 id="块级作用域"><a href="#块级作用域" class="headerlink" title="块级作用域"></a>块级作用域</h3><p><a href="https://wangdoc.com/es6/let.html#%E6%9A%82%E6%97%B6%E6%80%A7%E6%AD%BB%E5%8C%BA">https://wangdoc.com/es6/let.html#%E6%9A%82%E6%97%B6%E6%80%A7%E6%AD%BB%E5%8C%BA</a></p>]]></content>
      
      
      <categories>
          
          <category> ES6 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ES6 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>算法图解-chapter7</title>
      <link href="/2022/07/21/suan-fa-tu-jie-chapter7/"/>
      <url>/2022/07/21/suan-fa-tu-jie-chapter7/</url>
      
        <content type="html"><![CDATA[<h1 id="狄克斯特拉算法"><a href="#狄克斯特拉算法" class="headerlink" title="狄克斯特拉算法"></a>狄克斯特拉算法</h1><h5 id="权重：图中的每条边都有关联数字，这些数字称为权重"><a href="#权重：图中的每条边都有关联数字，这些数字称为权重" class="headerlink" title="权重：图中的每条边都有关联数字，这些数字称为权重"></a>权重：图中的每条边都有关联数字，这些数字称为权重</h5><h5 id="加权图-带权重的图称为加权图"><a href="#加权图-带权重的图称为加权图" class="headerlink" title="加权图: 带权重的图称为加权图"></a>加权图: 带权重的图称为加权图</h5><h5 id="非加权图-不带权重的图称为加权图"><a href="#非加权图-不带权重的图称为加权图" class="headerlink" title="非加权图: 不带权重的图称为加权图"></a>非加权图: 不带权重的图称为加权图</h5><h5 id="广度优先搜索-适合用于计算非加权图的最短路径"><a href="#广度优先搜索-适合用于计算非加权图的最短路径" class="headerlink" title="广度优先搜索: 适合用于计算非加权图的最短路径"></a>广度优先搜索: 适合用于计算非加权图的最短路径</h5><h5 id="狄克斯特拉算法-适合用于计算加权图（有向无环图）的最短路径，不能用于包含负权边的图。"><a href="#狄克斯特拉算法-适合用于计算加权图（有向无环图）的最短路径，不能用于包含负权边的图。" class="headerlink" title="狄克斯特拉算法: 适合用于计算加权图（有向无环图）的最短路径，不能用于包含负权边的图。"></a>狄克斯特拉算法: 适合用于计算加权图（有向无环图）的最短路径，不能用于包含负权边的图。</h5><h5 id="贝尔曼-福德算法-在包含负权边的图中找出最短路径"><a href="#贝尔曼-福德算法-在包含负权边的图中找出最短路径" class="headerlink" title="贝尔曼-福德算法: 在包含负权边的图中找出最短路径"></a>贝尔曼-福德算法: 在包含负权边的图中找出最短路径</h5><h4 id="例子如下"><a href="#例子如下" class="headerlink" title="例子如下"></a>例子如下</h4><p>![731658722220_.pic](/Users/kim/Library/Containers/com.tencent.xinWeChat/Data/Library/Application Support/com.tencent.xinWeChat/2.0b4.0.9/ece56dcd075e8c6770d7246233ebaaa4/Message/MessageTemp/9e20f478899dc29eb19741386f9343c8/Image/731658722220_.pic.jpg)</p><pre class=" language-tsx"><code class="language-tsx">// 狄克斯特拉算法const graph = {  start: {    a: 6,    b: 2,  },  a: {    end: 1,  },  b: {    a: 3,    end: 5,  },  end: {},} // 包含所有节点到其邻居的距离//起点到所有节点到距离（除了邻居外都为无穷大）const costs = {  a: 6,  b: 2,  end: Number(Infinity),}// 所有节点到父元素（除了起点邻居外都为空）const parents = {  a: 'start',  b: 'start',  end: '',}// 记录已处理过的节点let processed: string[] = []function find_lowest_cost_node(costs: object) {  let lowest_cost = Number(Infinity)  let lowest_cost_node = ''  for (const n in costs) {    const cost: number = costs[n as keyof typeof costs]    if (cost < lowest_cost && !processed.includes(n)) {      lowest_cost = cost      lowest_cost_node = n    }  }  return lowest_cost_node}function findShortestPath() {  let node = find_lowest_cost_node(costs)  while (node != '') {    let cost = costs[node as keyof typeof costs]    let neighbors = graph[node as keyof typeof graph]    for (const n in neighbors) {      let new_cost = cost + neighbors[n as keyof typeof neighbors]      if (costs[n as keyof typeof costs] > new_cost) {        costs[n as keyof typeof costs] = new_cost        parents[n as keyof typeof parents] = node      }    }    processed.push(node)    node = find_lowest_cost_node(costs)  }  let road: string[] = []  let last = 'end'  while (last != 'start') {    road.push(parents[last as keyof typeof parents])    last = parents[last as keyof typeof parents]  }  return road.join('->')}console.log(findShortestPath()) // a->b->start</code></pre>]]></content>
      
      
      <categories>
          
          <category> 算法图解 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 算法图解 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>算法图解-chapter4</title>
      <link href="/2022/07/21/suan-fa-tu-jie-chapter4/"/>
      <url>/2022/07/21/suan-fa-tu-jie-chapter4/</url>
      
        <content type="html"><![CDATA[<h1 id="快速排序"><a href="#快速排序" class="headerlink" title="快速排序"></a>快速排序</h1><pre class=" language-tsx"><code class="language-tsx">// 快速排序let arr = [3, 6, 9, 3, 2, 15, 67, 34, 2, 8]function quickSort(arr: number[], toLarge = true): number[] {  let length = arr.length  if (length == 0) return []  let firstNum = arr[0]  let left: number[] = []  let right: number[] = []  for (let i = 1; i < length; i++) {    if (arr[i] < firstNum) {      if (toLarge) left.push(arr[i])      else right.push(arr[i])    } else {      if (toLarge) right.push(arr[i])      else left.push(arr[i])    }  }  left = quickSort(left, toLarge)  right = quickSort(right, toLarge)  left.push(firstNum)  let result = left.concat(right)  return result}console.log(quickSort(arr)) // [ 2, 2,  3,  3,  6, 8, 9, 15, 34, 67]console.log(quickSort(arr, false)) // [ 67, 34, 15, 9, 8, 6,  3,  3, 2, 2]</code></pre>]]></content>
      
      
      <categories>
          
          <category> 算法图解 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 算法图解 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>算法图解-chapter2</title>
      <link href="/2022/07/20/suan-fa-tu-jie-chapter2/"/>
      <url>/2022/07/20/suan-fa-tu-jie-chapter2/</url>
      
        <content type="html"><![CDATA[<h1 id="选择排序"><a href="#选择排序" class="headerlink" title="选择排序"></a>选择排序</h1><h2 id="数组"><a href="#数组" class="headerlink" title="数组"></a>数组</h2><h6 id="排序是相连的"><a href="#排序是相连的" class="headerlink" title="排序是相连的"></a>排序是相连的</h6><ol><li>数组不定长的缺点：在新增元素时，需重新寻找空间</li><li>数组定长的缺点：额外多余的位置可能用不上，浪费内存</li></ol><h6 id="查找元素："><a href="#查找元素：" class="headerlink" title="查找元素："></a>查找元素：</h6><table><thead><tr><th align="center">读取</th><th align="center">插入</th><th align="center">删除</th></tr></thead><tbody><tr><td align="center">O(1)</td><td align="center">O(n)</td><td align="center">O(n)</td></tr></tbody></table><p>比链表效率高</p><h2 id="链表"><a href="#链表" class="headerlink" title="链表"></a>链表</h2><h6 id="元素可存储在内存的任何地方，通过指向来连接所有元素"><a href="#元素可存储在内存的任何地方，通过指向来连接所有元素" class="headerlink" title="元素可存储在内存的任何地方，通过指向来连接所有元素"></a>元素可存储在内存的任何地方，通过指向来连接所有元素</h6><h6 id="查找元素：-1"><a href="#查找元素：-1" class="headerlink" title="查找元素："></a>查找元素：</h6><table><thead><tr><th align="center">读取</th><th align="center">插入</th><th align="center">删除</th></tr></thead><tbody><tr><td align="center">O(n)</td><td align="center">O(1)</td><td align="center">O(1)</td></tr></tbody></table><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><pre class=" language-tsx"><code class="language-tsx">// 数组的选择排序let arr = [5, 3, 6, 2, 10]let arr1 = [5, 3, 6, 2, 10]function findIndex<T>(arr: T[], toLarge: boolean): number {  let target = arr[0]  let target_index = 0  for (let index = 0; index < arr.length; index++) {    if ((toLarge && arr[index] < target) || (!toLarge && arr[index] > target)) {      target = arr[index]      target_index = index    }  }  return target_index}function selectionSort(arr: number[], toLarge = true): number[] {  let newArr: number[] = []  let length = arr.length  while (length != 0) {    let target_index = findIndex(arr, toLarge)    newArr.push(arr.splice(target_index, 1)[0])    length = arr.length  }  return newArr}console.log(selectionSort(arr)) //  [ 2, 3, 5, 6, 10 ]console.log(selectionSort(arr1, false)) //  [ 10, 6, 5, 3, 2 ]</code></pre>]]></content>
      
      
      <categories>
          
          <category> 算法图解 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 算法图解 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>算法图解-chapter1</title>
      <link href="/2022/07/20/suan-fa-tu-jie-chapter1/"/>
      <url>/2022/07/20/suan-fa-tu-jie-chapter1/</url>
      
        <content type="html"><![CDATA[<h1 id="算法简介"><a href="#算法简介" class="headerlink" title="算法简介"></a>算法简介</h1><h2 id="二分查找"><a href="#二分查找" class="headerlink" title="二分查找"></a>二分查找</h2><pre class=" language-tsx"><code class="language-tsx">//  有序数组二分法查找let arr: number[] = [4, 5]function createArr(arr: number[]) {  for (let index = 1; index <= 100; index++) {    arr.push(index)  }}createArr(arr)// 基本使用function dichotomy(arr: number[], ele: number) {  let left = 0  let right = arr.length - 1  while (left <= right) {    let mid = Math.floor((left + right) / 2)    let midEle = arr[mid]    if (midEle == ele) return `该元素对应的下标为: ${mid}`    else if (midEle > ele) right = mid - 1    else left = mid + 1  }  return '没找到该元素对应的下标'}console.log(dichotomy(arr, 66)) //  该元素对应的下标为: 65console.log(dichotomy(arr, 12)) //  该元素对应的下标为: 11console.log(dichotomy(arr, -1)) //  没找到该元素对应的下标</code></pre><h2 id="常见的大O运行时间（越往下越慢）"><a href="#常见的大O运行时间（越往下越慢）" class="headerlink" title="常见的大O运行时间（越往下越慢）"></a>常见的大O运行时间（越往下越慢）</h2><table><thead><tr><th align="center">大O运行时间</th><th align="center">包括的算法</th></tr></thead><tbody><tr><td align="center">O(log n)</td><td align="center">二分查找</td></tr><tr><td align="center">O(n)</td><td align="center">简单查找</td></tr><tr><td align="center">O(n * logn)</td><td align="center">快速排序</td></tr><tr><td align="center">O(n ^ 2)</td><td align="center">选择排序</td></tr><tr><td align="center">O(n!)</td><td align="center">旅行商问题解决方案</td></tr></tbody></table>]]></content>
      
      
      <categories>
          
          <category> 算法图解 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 算法图解 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>算法初探</title>
      <link href="/2022/07/19/suan-fa-chu-tan/"/>
      <url>/2022/07/19/suan-fa-chu-tan/</url>
      
        <content type="html"><![CDATA[<h1 id="链表"><a href="#链表" class="headerlink" title="链表"></a>链表</h1><h2 id="理解链表"><a href="#理解链表" class="headerlink" title="理解链表"></a>理解链表</h2><p>​带有封装性质的数据结构，两块东西，数据和引用(指针)</p><h2 id="链表的特点"><a href="#链表的特点" class="headerlink" title="链表的特点"></a>链表的特点</h2><ol><li>空间上不连续</li><li>每存放一个值都会有一个引用空间</li></ol><h2 id="优点"><a href="#优点" class="headerlink" title="优点"></a>优点</h2><ol><li>只要内存足够大，就能存的下，不用担心空间碎片的问题</li><li>链表添加和删除非常容易</li></ol><h2 id="缺点"><a href="#缺点" class="headerlink" title="缺点"></a>缺点</h2><ol><li><p>链表的查询速度慢</p></li><li><p>链表的每一个查询都需要创建一个next，直接double了空间(在引用值和传的值相等的情况下double空间)</p></li></ol><h3 id="缺点避免"><a href="#缺点避免" class="headerlink" title="缺点避免"></a>缺点避免</h3><ol><li>节点内多开销的数存的越多，对内存影响越少</li></ol><h2 id="延伸（重要）"><a href="#延伸（重要）" class="headerlink" title="延伸（重要）"></a>延伸（重要）</h2><ol><li>传递一个链表，必须传递链表对根节点</li><li>每一个节点都认为自己是根节点</li></ol><h2 id="循环遍历数组和链表"><a href="#循环遍历数组和链表" class="headerlink" title="循环遍历数组和链表"></a>循环遍历数组和链表</h2><pre class=" language-tsx"><code class="language-tsx">// 循环遍历数组let a = [1,2,3,4,5]function traverse(arr: number[]) {    if (arr === null) return    for (let index = 0; index < arr.length; index++) {        console.log(arr[index]);            }}traverse(a)// 1// 2// 3// 4// 5// 循环遍历链表class CreateNode {    next: CreateNode | null    constructor(public value: number) {        this.value = value        this.next = null    }}let a = new CreateNode(1)let b = new CreateNode(2)let c = new CreateNode(3)let d = new CreateNode(4)a.next = bb.next = cc.next = dfunction traverse(root: CreateNode) {    let temp = root    while(temp != null) {        console.log(temp.value);        temp = temp.next!        console.log(temp);            }}traverse(a)// 1// 2// 3// 4</code></pre><h2 id="递归遍历数组和链表"><a href="#递归遍历数组和链表" class="headerlink" title="递归遍历数组和链表"></a>递归遍历数组和链表</h2><pre class=" language-tsx"><code class="language-tsx">// 递归遍历数组let arr = [1,2,3,4,5]function traverse(arr: any[], index = 0) {    if (arr === null || index >= arr.length) return    console.log(arr[index]);    traverse(arr, index + 1)}traverse(arr)// 1// 2// 3// 4// 5// 递归遍历链表class CreateNode {    next: CreateNode | null    constructor(public value: number) {        this.value = value        this.next = null    }}let a = new CreateNode(1)let b = new CreateNode(2)let c = new CreateNode(3)let d = new CreateNode(4)a.next = bb.next = cc.next = dfunction traverse(root: CreateNode) {    if (root === null) return    console.log(root.value);    traverse(root.next!)}traverse(a)// 1// 2// 3// 4</code></pre><h2 id="逆序链表"><a href="#逆序链表" class="headerlink" title="逆序链表"></a>逆序链表</h2><pre class=" language-tsx"><code class="language-tsx">// 逆序链表class CreateNode {    next: CreateNode | null    constructor(public value: number) {        this.value = value        this.next = null    }}let a = new CreateNode(1)let b = new CreateNode(2)let c = new CreateNode(3)let d = new CreateNode(4)a.next = bb.next = cc.next = dfunction reverse(root: CreateNode) : CreateNode | null {    if (root === null) return null    if (root.next === null) return null    if (root.next.next === null) {        root.next.next = root        return root.next    } else {        let result = reverse(root.next)        root.next.next = root        root.next = null        return result    }    }function traverse(root: CreateNode) {    if (root === null) return    console.log(root.value);    traverse(root.next!)}traverse(a)traverse(reverse(a)!);// 1// 2// 3// 4// 4// 3// 2// 1</code></pre><h2 id="数组冒泡排序"><a href="#数组冒泡排序" class="headerlink" title="数组冒泡排序"></a>数组冒泡排序</h2><pre class=" language-tsx"><code class="language-tsx">// 数组冒泡排序let arr = [6, 5, 4, 3, 2, 1]function compare<T>(a: T, b: T): boolean {  if (a > b) return true  return false}function exchange(i: number, j: number) {  let length = arr.length  if (i > length - 1 || j > length - 1) return  var temp = arr[i]  arr[i] = arr[j]  arr[j] = temp}function sortToLarge<T>(arr: T[]) {  let length = arr.length  if (length <= 1) return  for (let i = 0; i < length; i++) {    for (let j = i + 1; j < length; j++) {      if (compare(arr[i], arr[j])) {        exchange(i, j)      }    }  }}function sortToSmall<T>(arr: T[]) {  let length = arr.length  if (length <= 1) return  // for (let i = length - 1; i >= 0; i--) {  //     for (let j = i - 1; j >= 0; j--) {  //         if (compare(arr[i], arr[j])) {  //             exchange(i,j)  //         }  //     }  // }  for (let i = 0; i < length; i++) {    for (let j = i + 1; j < length; j++) {      if (!compare(arr[i], arr[j])) {        exchange(i, j)      }    }  }}// toLarge为true代表从小到大，反之function sort<T>(arr: T[], toLarge: boolean) {  let length = arr.length  if (length <= 1) return  for (let i = 0; i < length; i++) {    for (let j = i + 1; j < length; j++) {      if (toLarge == compare(arr[i], arr[j])) {        exchange(i, j)      }    }  }}console.log(arr) //[ 6, 5, 4, 3, 2, 1 ]// sortToLarge(arr)sort(arr, true)console.log(arr) //[ 1, 2, 3, 4, 5, 6 ]// sortToSmall(arr)sort(arr, false)console.log(arr) //[ 6, 5, 4, 3, 2, 1 ]</code></pre><h2 id="数组快速排序"><a href="#数组快速排序" class="headerlink" title="数组快速排序"></a>数组快速排序</h2><pre class=" language-tsx"><code class="language-tsx">// 数组快速排序let arr = [4, 1, 6, 5, 3, 2, 8, 7]function quickSort(arr: number[], toLarge = true) {  let length = arr.length  if (length == 0 || arr == null) return []  let leader = arr[0]  let left: number[] = []  let right: number[] = []  for (let i = 1; i < length; i++) {    if (arr[i] < leader) {      if (toLarge) left.push(arr[i])      else right.push(arr[i])    } else {      if (toLarge) right.push(arr[i])      else left.push(arr[i])    }  }  left = quickSort(left, toLarge)!  right = quickSort(right, toLarge)!  left.push(leader)  let result = left.concat(right)  return result}console.log(quickSort(arr)) // [1, 2, 3, 4, 5, 6, 7, 8]console.log(quickSort(arr, false)) // [8, 7, 6, 5, 4, 3, 2, 1]</code></pre>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 算法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ios跟练笔记-protocol</title>
      <link href="/2022/07/19/ios-gen-lian-bi-ji-protocol/"/>
      <url>/2022/07/19/ios-gen-lian-bi-ji-protocol/</url>
      
        <content type="html"><![CDATA[<h1 id="Protocol"><a href="#Protocol" class="headerlink" title="Protocol"></a>Protocol</h1><h2 id="基本用法-example-1"><a href="#基本用法-example-1" class="headerlink" title="基本用法 (example 1)"></a>基本用法 (example 1)</h2><pre class=" language-swift"><code class="language-swift">protocol <span class="token builtin">Combatable</span> <span class="token punctuation">{</span>    <span class="token keyword">var</span> name<span class="token punctuation">:</span> <span class="token builtin">String</span> <span class="token punctuation">{</span> <span class="token keyword">get</span> <span class="token punctuation">}</span>    <span class="token keyword">var</span> hp<span class="token punctuation">:</span> <span class="token builtin">Int</span> <span class="token punctuation">{</span> <span class="token keyword">get</span> <span class="token keyword">set</span> <span class="token punctuation">}</span>    <span class="token keyword">var</span> maxHp<span class="token punctuation">:</span> <span class="token builtin">Int</span> <span class="token punctuation">{</span> <span class="token keyword">get</span> <span class="token keyword">set</span> <span class="token punctuation">}</span>    <span class="token keyword">var</span> attackPower<span class="token punctuation">:</span> <span class="token builtin">Int</span> <span class="token punctuation">{</span> <span class="token keyword">get</span> <span class="token keyword">set</span> <span class="token punctuation">}</span>    <span class="token keyword">var</span> level<span class="token punctuation">:</span> <span class="token builtin">Int</span> <span class="token punctuation">{</span> <span class="token keyword">get</span> <span class="token keyword">set</span> <span class="token punctuation">}</span>    <span class="token keyword">init</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token keyword">extension</span> <span class="token builtin">Combatable</span> <span class="token punctuation">{</span>    <span class="token keyword">mutating</span> <span class="token keyword">func</span> <span class="token function">relax</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        hp <span class="token operator">=</span> maxHp        <span class="token function">print</span><span class="token punctuation">(</span><span class="token string">"<span class="token interpolation"><span class="token delimiter variable">\(</span>name<span class="token delimiter variable">)</span></span> 睡饱了，HP补满！"</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span>    <span class="token keyword">mutating</span> <span class="token keyword">func</span> <span class="token function">upLevel</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        maxHp <span class="token operator">=</span> <span class="token function">Int</span><span class="token punctuation">(</span><span class="token function">Double</span><span class="token punctuation">(</span>maxHp<span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">1.1</span><span class="token punctuation">)</span>        hp <span class="token operator">=</span> maxHp        attackPower <span class="token operator">=</span> <span class="token function">Int</span><span class="token punctuation">(</span><span class="token function">Double</span><span class="token punctuation">(</span>attackPower<span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">1.2</span><span class="token punctuation">)</span>        level <span class="token operator">+</span><span class="token operator">=</span> <span class="token number">1</span>        <span class="token function">print</span><span class="token punctuation">(</span><span class="token string">"<span class="token interpolation"><span class="token delimiter variable">\(</span>name<span class="token delimiter variable">)</span></span>升至<span class="token interpolation"><span class="token delimiter variable">\(</span>level<span class="token delimiter variable">)</span></span>级了，现在hp为<span class="token interpolation"><span class="token delimiter variable">\(</span>hp<span class="token delimiter variable">)</span></span>,攻击力为<span class="token interpolation"><span class="token delimiter variable">\(</span>attackPower<span class="token delimiter variable">)</span></span>。"</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span>    <span class="token keyword">func</span> attack<span class="token operator">&lt;</span>T<span class="token punctuation">:</span> <span class="token builtin">Combatable</span><span class="token operator">></span><span class="token punctuation">(</span> on target<span class="token punctuation">:</span> <span class="token keyword">inout</span> T<span class="token punctuation">)</span> <span class="token punctuation">{</span>        target<span class="token punctuation">.</span>hp <span class="token operator">-</span><span class="token operator">=</span> <span class="token keyword">self</span><span class="token punctuation">.</span>attackPower        <span class="token function">print</span><span class="token punctuation">(</span><span class="token string">"<span class="token interpolation"><span class="token delimiter variable">\(</span>name<span class="token delimiter variable">)</span></span>对<span class="token interpolation"><span class="token delimiter variable">\(</span>target<span class="token punctuation">.</span>name<span class="token delimiter variable">)</span></span>造成<span class="token interpolation"><span class="token delimiter variable">\(</span>attackPower<span class="token delimiter variable">)</span></span>点伤害，<span class="token interpolation"><span class="token delimiter variable">\(</span>target<span class="token punctuation">.</span>name<span class="token delimiter variable">)</span></span>剩下<span class="token interpolation"><span class="token delimiter variable">\(</span>target<span class="token punctuation">.</span>hp<span class="token delimiter variable">)</span></span>点HP。"</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">struct</span> <span class="token builtin">Pokemon</span><span class="token punctuation">:</span> <span class="token builtin">Combatable</span> <span class="token punctuation">{</span>    <span class="token keyword">var</span> name<span class="token punctuation">:</span> <span class="token builtin">String</span> <span class="token operator">=</span> <span class="token string">"某个宝可梦"</span>    <span class="token keyword">var</span> hp<span class="token punctuation">:</span> <span class="token builtin">Int</span> <span class="token operator">=</span> <span class="token number">50</span>    <span class="token keyword">var</span> maxHp<span class="token punctuation">:</span> <span class="token builtin">Int</span> <span class="token operator">=</span> <span class="token number">50</span>    <span class="token keyword">var</span> attackPower<span class="token punctuation">:</span> <span class="token builtin">Int</span> <span class="token operator">=</span> <span class="token number">5</span>    <span class="token keyword">var</span> level<span class="token punctuation">:</span> <span class="token builtin">Int</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">}</span><span class="token keyword">struct</span> <span class="token builtin">EvilAlien</span><span class="token punctuation">:</span> <span class="token builtin">Combatable</span> <span class="token punctuation">{</span>    <span class="token keyword">var</span> name<span class="token punctuation">:</span> <span class="token builtin">String</span> <span class="token operator">=</span> <span class="token string">"某个邪恶外星人"</span>    <span class="token keyword">var</span> hp<span class="token punctuation">:</span> <span class="token builtin">Int</span> <span class="token operator">=</span> <span class="token number">60</span>    <span class="token keyword">var</span> maxHp<span class="token punctuation">:</span> <span class="token builtin">Int</span> <span class="token operator">=</span> <span class="token number">60</span>    <span class="token keyword">var</span> attackPower<span class="token punctuation">:</span> <span class="token builtin">Int</span> <span class="token operator">=</span> <span class="token number">7</span>    <span class="token keyword">var</span> level<span class="token punctuation">:</span> <span class="token builtin">Int</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">}</span><span class="token keyword">var</span> pikachu <span class="token operator">=</span> <span class="token function">Pokemon</span><span class="token punctuation">(</span>name<span class="token punctuation">:</span> <span class="token string">"皮卡丘"</span><span class="token punctuation">)</span><span class="token keyword">var</span> duck <span class="token operator">=</span> <span class="token function">Pokemon</span><span class="token punctuation">(</span>name<span class="token punctuation">:</span> <span class="token string">"可达鸭"</span><span class="token punctuation">)</span><span class="token keyword">var</span> alien <span class="token operator">=</span> <span class="token function">EvilAlien</span><span class="token punctuation">(</span><span class="token punctuation">)</span>pikachu<span class="token punctuation">.</span><span class="token function">upLevel</span><span class="token punctuation">(</span><span class="token punctuation">)</span>alien<span class="token punctuation">.</span><span class="token function">upLevel</span><span class="token punctuation">(</span><span class="token punctuation">)</span>pikachu<span class="token punctuation">.</span><span class="token function">attack</span><span class="token punctuation">(</span>on<span class="token punctuation">:</span> <span class="token operator">&amp;</span>alien<span class="token punctuation">)</span>duck<span class="token punctuation">.</span><span class="token function">attack</span><span class="token punctuation">(</span>on<span class="token punctuation">:</span> <span class="token operator">&amp;</span>pikachu<span class="token punctuation">)</span>duck<span class="token punctuation">.</span><span class="token function">attack</span><span class="token punctuation">(</span>on<span class="token punctuation">:</span> <span class="token operator">&amp;</span>alien<span class="token punctuation">)</span></code></pre><h2 id="associatedtype"><a href="#associatedtype" class="headerlink" title="associatedtype"></a>associatedtype</h2><pre class=" language-swift"><code class="language-swift">    protocol <span class="token builtin">Combatable</span> <span class="token punctuation">{</span>    associatedtype <span class="token builtin">Level</span>    <span class="token keyword">var</span> name<span class="token punctuation">:</span> <span class="token builtin">String</span> <span class="token punctuation">{</span> <span class="token keyword">get</span> <span class="token punctuation">}</span>    <span class="token keyword">var</span> hp<span class="token punctuation">:</span> <span class="token builtin">Int</span> <span class="token punctuation">{</span> <span class="token keyword">get</span> <span class="token keyword">set</span> <span class="token punctuation">}</span>    <span class="token keyword">var</span> maxHp<span class="token punctuation">:</span> <span class="token builtin">Int</span> <span class="token punctuation">{</span> <span class="token keyword">get</span> <span class="token keyword">set</span> <span class="token punctuation">}</span>    <span class="token keyword">var</span> attackPower<span class="token punctuation">:</span> <span class="token builtin">Int</span> <span class="token punctuation">{</span> <span class="token keyword">get</span> <span class="token keyword">set</span> <span class="token punctuation">}</span>    <span class="token keyword">var</span> level<span class="token punctuation">:</span> <span class="token builtin">Level</span> <span class="token punctuation">{</span> <span class="token keyword">get</span> <span class="token keyword">set</span> <span class="token punctuation">}</span>    <span class="token keyword">init</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">mutating</span> <span class="token keyword">func</span> <span class="token function">setLevel</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token keyword">extension</span> <span class="token builtin">Combatable</span> <span class="token punctuation">{</span>    <span class="token keyword">mutating</span> <span class="token keyword">func</span> <span class="token function">relax</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        hp <span class="token operator">=</span> maxHp        <span class="token function">print</span><span class="token punctuation">(</span><span class="token string">"<span class="token interpolation"><span class="token delimiter variable">\(</span>name<span class="token delimiter variable">)</span></span> 睡饱了，HP补满！"</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span>    <span class="token keyword">mutating</span> <span class="token keyword">func</span> <span class="token function">upLevel</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        maxHp <span class="token operator">=</span> <span class="token function">Int</span><span class="token punctuation">(</span><span class="token function">Double</span><span class="token punctuation">(</span>maxHp<span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">1.1</span><span class="token punctuation">)</span>        hp <span class="token operator">=</span> maxHp        attackPower <span class="token operator">=</span> <span class="token function">Int</span><span class="token punctuation">(</span><span class="token function">Double</span><span class="token punctuation">(</span>attackPower<span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">1.2</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">//        level += 1</span>        <span class="token function">setLevel</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token function">print</span><span class="token punctuation">(</span><span class="token string">"<span class="token interpolation"><span class="token delimiter variable">\(</span>name<span class="token delimiter variable">)</span></span>升至<span class="token interpolation"><span class="token delimiter variable">\(</span>level<span class="token delimiter variable">)</span></span>级了，现在hp为<span class="token interpolation"><span class="token delimiter variable">\(</span>hp<span class="token delimiter variable">)</span></span>,攻击力为<span class="token interpolation"><span class="token delimiter variable">\(</span>attackPower<span class="token delimiter variable">)</span></span>。"</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span>    <span class="token keyword">func</span> attack<span class="token operator">&lt;</span>T<span class="token punctuation">:</span> <span class="token builtin">Combatable</span><span class="token operator">></span><span class="token punctuation">(</span> on target<span class="token punctuation">:</span> <span class="token keyword">inout</span> T<span class="token punctuation">)</span> <span class="token punctuation">{</span>        target<span class="token punctuation">.</span>hp <span class="token operator">-</span><span class="token operator">=</span> <span class="token keyword">self</span><span class="token punctuation">.</span>attackPower        <span class="token function">print</span><span class="token punctuation">(</span><span class="token string">"<span class="token interpolation"><span class="token delimiter variable">\(</span>name<span class="token delimiter variable">)</span></span>对<span class="token interpolation"><span class="token delimiter variable">\(</span>target<span class="token punctuation">.</span>name<span class="token delimiter variable">)</span></span>造成<span class="token interpolation"><span class="token delimiter variable">\(</span>attackPower<span class="token delimiter variable">)</span></span>点伤害，<span class="token interpolation"><span class="token delimiter variable">\(</span>target<span class="token punctuation">.</span>name<span class="token delimiter variable">)</span></span>剩下<span class="token interpolation"><span class="token delimiter variable">\(</span>target<span class="token punctuation">.</span>hp<span class="token delimiter variable">)</span></span>点HP。"</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">struct</span> <span class="token builtin">Pokemon</span><span class="token punctuation">:</span> <span class="token builtin">Combatable</span> <span class="token punctuation">{</span>    <span class="token keyword">var</span> name<span class="token punctuation">:</span> <span class="token builtin">String</span> <span class="token operator">=</span> <span class="token string">"某个宝可梦"</span>    <span class="token keyword">var</span> hp<span class="token punctuation">:</span> <span class="token builtin">Int</span> <span class="token operator">=</span> <span class="token number">50</span>    <span class="token keyword">var</span> maxHp<span class="token punctuation">:</span> <span class="token builtin">Int</span> <span class="token operator">=</span> <span class="token number">50</span>    <span class="token keyword">var</span> attackPower<span class="token punctuation">:</span> <span class="token builtin">Int</span> <span class="token operator">=</span> <span class="token number">5</span>    <span class="token keyword">var</span> level<span class="token punctuation">:</span> <span class="token builtin">Int</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">}</span><span class="token keyword">extension</span> <span class="token builtin">Combatable</span> <span class="token keyword">where</span> <span class="token builtin">Level</span> <span class="token operator">==</span> <span class="token builtin">Int</span> <span class="token punctuation">{</span>    <span class="token keyword">mutating</span> <span class="token keyword">func</span> <span class="token function">setLevel</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        level <span class="token operator">+</span><span class="token operator">=</span> <span class="token number">1</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">struct</span> <span class="token builtin">Jedi</span><span class="token punctuation">:</span> <span class="token builtin">Combatable</span> <span class="token punctuation">{</span>    <span class="token keyword">mutating</span> <span class="token keyword">func</span> <span class="token function">setLevel</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">let</span> level <span class="token operator">=</span> level<span class="token punctuation">.</span>rawValue <span class="token operator">+</span> <span class="token number">1</span>        <span class="token keyword">self</span><span class="token punctuation">.</span>level <span class="token operator">=</span> <span class="token function">Level</span><span class="token punctuation">(</span>rawValue<span class="token punctuation">:</span> level<span class="token punctuation">)</span> <span class="token operator">?</span><span class="token operator">?</span> <span class="token punctuation">.</span>grandmaster    <span class="token punctuation">}</span>    <span class="token keyword">enum</span> <span class="token builtin">Level</span><span class="token punctuation">:</span> <span class="token builtin">Int</span> <span class="token punctuation">{</span>        <span class="token keyword">case</span> apprentice0<span class="token punctuation">,</span> apprentice1<span class="token punctuation">,</span> jedi<span class="token punctuation">,</span> master<span class="token punctuation">,</span> grandmaster    <span class="token punctuation">}</span>    <span class="token keyword">var</span> name<span class="token punctuation">:</span> <span class="token builtin">String</span> <span class="token operator">=</span> <span class="token string">"某个绝地武士"</span>    <span class="token keyword">var</span> hp<span class="token punctuation">:</span> <span class="token builtin">Int</span> <span class="token operator">=</span> <span class="token number">100</span>    <span class="token keyword">var</span> maxHp<span class="token punctuation">:</span> <span class="token builtin">Int</span> <span class="token operator">=</span> <span class="token number">60</span>    <span class="token keyword">var</span> attackPower<span class="token punctuation">:</span> <span class="token builtin">Int</span> <span class="token operator">=</span> <span class="token number">5</span>    <span class="token keyword">var</span> level<span class="token punctuation">:</span> <span class="token builtin">Level</span> <span class="token operator">=</span> <span class="token punctuation">.</span>apprentice0<span class="token punctuation">}</span><span class="token keyword">var</span> warrior <span class="token operator">=</span> <span class="token function">Jedi</span><span class="token punctuation">(</span><span class="token punctuation">)</span>warrior<span class="token punctuation">.</span><span class="token function">upLevel</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">var</span> pikachu <span class="token operator">=</span> <span class="token function">Pokemon</span><span class="token punctuation">(</span>name<span class="token punctuation">:</span> <span class="token string">"皮卡丘"</span><span class="token punctuation">)</span>warrior<span class="token punctuation">.</span><span class="token function">attack</span><span class="token punctuation">(</span>on<span class="token punctuation">:</span> <span class="token operator">&amp;</span>pikachu<span class="token punctuation">)</span></code></pre><h2 id="associatedtype-使用-strideable"><a href="#associatedtype-使用-strideable" class="headerlink" title="associatedtype 使用 strideable"></a>associatedtype 使用 strideable</h2><pre class=" language-swift"><code class="language-swift">protocol <span class="token builtin">Combatable</span> <span class="token punctuation">{</span>    associatedtype <span class="token builtin">Level</span><span class="token punctuation">:</span> <span class="token builtin">Strideable</span> <span class="token keyword">where</span> <span class="token builtin">Level</span><span class="token punctuation">.</span><span class="token builtin">Stride</span> <span class="token operator">==</span> <span class="token builtin">Int</span>    <span class="token keyword">var</span> name<span class="token punctuation">:</span> <span class="token builtin">String</span> <span class="token punctuation">{</span> <span class="token keyword">get</span> <span class="token punctuation">}</span>    <span class="token keyword">var</span> hp<span class="token punctuation">:</span> <span class="token builtin">Int</span> <span class="token punctuation">{</span> <span class="token keyword">get</span> <span class="token keyword">set</span> <span class="token punctuation">}</span>    <span class="token keyword">var</span> maxHp<span class="token punctuation">:</span> <span class="token builtin">Int</span> <span class="token punctuation">{</span> <span class="token keyword">get</span> <span class="token keyword">set</span> <span class="token punctuation">}</span>    <span class="token keyword">var</span> attackPower<span class="token punctuation">:</span> <span class="token builtin">Int</span> <span class="token punctuation">{</span> <span class="token keyword">get</span> <span class="token keyword">set</span> <span class="token punctuation">}</span>    <span class="token keyword">var</span> level<span class="token punctuation">:</span> <span class="token builtin">Level</span> <span class="token punctuation">{</span> <span class="token keyword">get</span> <span class="token keyword">set</span> <span class="token punctuation">}</span>    <span class="token keyword">init</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token keyword">extension</span> <span class="token builtin">Combatable</span> <span class="token punctuation">{</span>    <span class="token keyword">mutating</span> <span class="token keyword">func</span> <span class="token function">relax</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        hp <span class="token operator">=</span> maxHp        <span class="token function">print</span><span class="token punctuation">(</span><span class="token string">"<span class="token interpolation"><span class="token delimiter variable">\(</span>name<span class="token delimiter variable">)</span></span> 睡饱了，HP补满！"</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span>    <span class="token keyword">mutating</span> <span class="token keyword">func</span> <span class="token function">upLevel</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        maxHp <span class="token operator">=</span> <span class="token function">Int</span><span class="token punctuation">(</span><span class="token function">Double</span><span class="token punctuation">(</span>maxHp<span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">1.1</span><span class="token punctuation">)</span>        hp <span class="token operator">=</span> maxHp        attackPower <span class="token operator">=</span> <span class="token function">Int</span><span class="token punctuation">(</span><span class="token function">Double</span><span class="token punctuation">(</span>attackPower<span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">1.2</span><span class="token punctuation">)</span>        level <span class="token operator">=</span> level<span class="token punctuation">.</span><span class="token function">advanced</span><span class="token punctuation">(</span>by<span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">)</span>        <span class="token function">print</span><span class="token punctuation">(</span><span class="token string">"<span class="token interpolation"><span class="token delimiter variable">\(</span>name<span class="token delimiter variable">)</span></span>升至<span class="token interpolation"><span class="token delimiter variable">\(</span>level<span class="token delimiter variable">)</span></span>级了，现在hp为<span class="token interpolation"><span class="token delimiter variable">\(</span>hp<span class="token delimiter variable">)</span></span>,攻击力为<span class="token interpolation"><span class="token delimiter variable">\(</span>attackPower<span class="token delimiter variable">)</span></span>。"</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span>    <span class="token keyword">func</span> attack<span class="token operator">&lt;</span>T<span class="token punctuation">:</span> <span class="token builtin">Combatable</span><span class="token operator">></span><span class="token punctuation">(</span> on target<span class="token punctuation">:</span> <span class="token keyword">inout</span> T<span class="token punctuation">)</span> <span class="token punctuation">{</span>        target<span class="token punctuation">.</span>hp <span class="token operator">-</span><span class="token operator">=</span> <span class="token keyword">self</span><span class="token punctuation">.</span>attackPower        <span class="token function">print</span><span class="token punctuation">(</span><span class="token string">"<span class="token interpolation"><span class="token delimiter variable">\(</span>name<span class="token delimiter variable">)</span></span>对<span class="token interpolation"><span class="token delimiter variable">\(</span>target<span class="token punctuation">.</span>name<span class="token delimiter variable">)</span></span>造成<span class="token interpolation"><span class="token delimiter variable">\(</span>attackPower<span class="token delimiter variable">)</span></span>点伤害，<span class="token interpolation"><span class="token delimiter variable">\(</span>target<span class="token punctuation">.</span>name<span class="token delimiter variable">)</span></span>剩下<span class="token interpolation"><span class="token delimiter variable">\(</span>target<span class="token punctuation">.</span>hp<span class="token delimiter variable">)</span></span>点HP。"</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">struct</span> <span class="token builtin">Pokemon</span><span class="token punctuation">:</span> <span class="token builtin">Combatable</span> <span class="token punctuation">{</span>    <span class="token keyword">var</span> name<span class="token punctuation">:</span> <span class="token builtin">String</span> <span class="token operator">=</span> <span class="token string">"某个宝可梦"</span>    <span class="token keyword">var</span> hp<span class="token punctuation">:</span> <span class="token builtin">Int</span> <span class="token operator">=</span> <span class="token number">50</span>    <span class="token keyword">var</span> maxHp<span class="token punctuation">:</span> <span class="token builtin">Int</span> <span class="token operator">=</span> <span class="token number">50</span>    <span class="token keyword">var</span> attackPower<span class="token punctuation">:</span> <span class="token builtin">Int</span> <span class="token operator">=</span> <span class="token number">5</span>    <span class="token keyword">var</span> level<span class="token punctuation">:</span> <span class="token builtin">Int</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">}</span><span class="token keyword">extension</span> <span class="token builtin">Combatable</span> <span class="token keyword">where</span> <span class="token builtin">Level</span> <span class="token operator">==</span> <span class="token builtin">Int</span> <span class="token punctuation">{</span>    <span class="token keyword">mutating</span> <span class="token keyword">func</span> <span class="token function">setLevel</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        level <span class="token operator">+</span><span class="token operator">=</span> <span class="token number">1</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">struct</span> <span class="token builtin">Jedi</span><span class="token punctuation">:</span> <span class="token builtin">Combatable</span> <span class="token punctuation">{</span>    <span class="token keyword">enum</span> <span class="token builtin">Level</span><span class="token punctuation">:</span> <span class="token builtin">Int</span><span class="token punctuation">,</span> <span class="token builtin">Strideable</span><span class="token punctuation">,</span> <span class="token builtin">CustomStringConvertible</span> <span class="token punctuation">{</span>        <span class="token keyword">typealias</span> <span class="token builtin">Stride</span> <span class="token operator">=</span> <span class="token builtin">Int</span>        <span class="token keyword">var</span> description<span class="token punctuation">:</span> <span class="token builtin">String</span> <span class="token punctuation">{</span>            <span class="token keyword">switch</span> <span class="token keyword">self</span> <span class="token punctuation">{</span>            <span class="token keyword">case</span> <span class="token punctuation">.</span>apprentice0<span class="token punctuation">:</span>                <span class="token keyword">return</span> <span class="token string">"幼徒"</span>            <span class="token keyword">case</span> <span class="token punctuation">.</span>apprentice1<span class="token punctuation">:</span>                <span class="token keyword">return</span> <span class="token string">"学徒"</span>            <span class="token keyword">case</span> <span class="token punctuation">.</span>jedi<span class="token punctuation">:</span>                <span class="token keyword">return</span> <span class="token string">"绝地武士"</span>            <span class="token keyword">case</span> <span class="token punctuation">.</span>master<span class="token punctuation">:</span>                <span class="token keyword">return</span> <span class="token string">"大师"</span>            <span class="token keyword">case</span> <span class="token punctuation">.</span>grandmaster<span class="token punctuation">:</span>                <span class="token keyword">return</span> <span class="token string">"宗师"</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">func</span> <span class="token function">advanced</span><span class="token punctuation">(</span>by n<span class="token punctuation">:</span> <span class="token builtin">Int</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token builtin">Jedi</span><span class="token punctuation">.</span><span class="token builtin">Level</span> <span class="token punctuation">{</span>            <span class="token keyword">let</span> level <span class="token operator">=</span> rawValue <span class="token operator">+</span> n            <span class="token keyword">return</span> <span class="token builtin">Level</span><span class="token punctuation">.</span><span class="token keyword">init</span><span class="token punctuation">(</span>rawValue<span class="token punctuation">:</span> level<span class="token punctuation">)</span> <span class="token operator">?</span><span class="token operator">?</span> <span class="token punctuation">.</span>grandmaster        <span class="token punctuation">}</span>        <span class="token keyword">func</span> <span class="token function">distance</span><span class="token punctuation">(</span>to other<span class="token punctuation">:</span> <span class="token builtin">Jedi</span><span class="token punctuation">.</span><span class="token builtin">Level</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token builtin">Int</span> <span class="token punctuation">{</span>            other<span class="token punctuation">.</span>rawValue <span class="token operator">-</span> <span class="token keyword">self</span><span class="token punctuation">.</span>rawValue        <span class="token punctuation">}</span>        <span class="token keyword">case</span> apprentice0<span class="token punctuation">,</span> apprentice1<span class="token punctuation">,</span> jedi<span class="token punctuation">,</span> master<span class="token punctuation">,</span> grandmaster    <span class="token punctuation">}</span>    <span class="token keyword">var</span> name<span class="token punctuation">:</span> <span class="token builtin">String</span> <span class="token operator">=</span> <span class="token string">"某个绝地武士"</span>    <span class="token keyword">var</span> hp<span class="token punctuation">:</span> <span class="token builtin">Int</span> <span class="token operator">=</span> <span class="token number">100</span>    <span class="token keyword">var</span> maxHp<span class="token punctuation">:</span> <span class="token builtin">Int</span> <span class="token operator">=</span> <span class="token number">60</span>    <span class="token keyword">var</span> attackPower<span class="token punctuation">:</span> <span class="token builtin">Int</span> <span class="token operator">=</span> <span class="token number">5</span>    <span class="token keyword">var</span> level<span class="token punctuation">:</span> <span class="token builtin">Level</span> <span class="token operator">=</span> <span class="token punctuation">.</span>apprentice0<span class="token punctuation">}</span><span class="token keyword">var</span> warrior <span class="token operator">=</span> <span class="token function">Jedi</span><span class="token punctuation">(</span><span class="token punctuation">)</span>warrior<span class="token punctuation">.</span><span class="token function">upLevel</span><span class="token punctuation">(</span><span class="token punctuation">)</span>warrior<span class="token punctuation">.</span><span class="token function">upLevel</span><span class="token punctuation">(</span><span class="token punctuation">)</span>warrior<span class="token punctuation">.</span><span class="token function">upLevel</span><span class="token punctuation">(</span><span class="token punctuation">)</span>warrior<span class="token punctuation">.</span><span class="token function">upLevel</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">var</span> pikachu <span class="token operator">=</span> <span class="token function">Pokemon</span><span class="token punctuation">(</span>name<span class="token punctuation">:</span> <span class="token string">"皮卡丘"</span><span class="token punctuation">)</span>warrior<span class="token punctuation">.</span><span class="token function">attack</span><span class="token punctuation">(</span>on<span class="token punctuation">:</span> <span class="token operator">&amp;</span>pikachu<span class="token punctuation">)</span></code></pre><h2 id="protocol-搭配其他-protocol"><a href="#protocol-搭配其他-protocol" class="headerlink" title="protocol 搭配其他 protocol"></a>protocol 搭配其他 protocol</h2><p>在定义protocol的时候可以为此协议声明遵守其他协议，但不可在此协议的extension声明遵循</p><h2 id="没有associatedtype-的-protocol-可以直接当做类型使用。"><a href="#没有associatedtype-的-protocol-可以直接当做类型使用。" class="headerlink" title="没有associatedtype 的 protocol 可以直接当做类型使用。"></a>没有associatedtype 的 protocol 可以直接当做类型使用。</h2><pre class=" language-swift"><code class="language-swift"><span class="token comment" spellcheck="true">// 放在属性、参数、回传值的类型中</span><span class="token comment" spellcheck="true">// 用 &amp; 来结合</span>protocol <span class="token builtin">HasName</span> <span class="token punctuation">{</span>    <span class="token keyword">var</span> name<span class="token punctuation">:</span> <span class="token builtin">String</span> <span class="token punctuation">{</span> <span class="token keyword">get</span> <span class="token punctuation">}</span><span class="token punctuation">}</span>protocol <span class="token builtin">HasAddress</span> <span class="token punctuation">{</span>    <span class="token keyword">var</span> address<span class="token punctuation">:</span> <span class="token builtin">String</span> <span class="token punctuation">{</span> <span class="token keyword">get</span> <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">let</span> array<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token builtin">HasName</span> <span class="token operator">&amp;</span> <span class="token builtin">HasAddress</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> ios </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ios </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ios跟练笔记-Optional解包</title>
      <link href="/2022/07/19/ios-gen-lian-bi-ji-optional-jie-bao/"/>
      <url>/2022/07/19/ios-gen-lian-bi-ji-optional-jie-bao/</url>
      
        <content type="html"><![CDATA[<h1 id="Optional-解包"><a href="#Optional-解包" class="headerlink" title="Optional 解包"></a>Optional 解包</h1><pre class=" language-swift"><code class="language-swift"><span class="token keyword">let</span> name<span class="token punctuation">:</span> <span class="token builtin">String</span><span class="token operator">?</span> <span class="token operator">=</span> <span class="token constant">nil</span><span class="token comment" spellcheck="true">// !解包    这种方式要必须确定name有值的时候才可使用，不然会引起报错闪退</span><span class="token function">print</span><span class="token punctuation">(</span>name<span class="token operator">!</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">// ??解包    提供默认值，解包成功用原值，否则用默认值</span><span class="token function">print</span><span class="token punctuation">(</span>name <span class="token operator">?</span><span class="token operator">?</span> <span class="token string">"kim"</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// kim</span><span class="token comment" spellcheck="true">// if let 解包</span><span class="token keyword">if</span> <span class="token keyword">let</span> name <span class="token operator">=</span> name <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 进入到此视为有值</span>    <span class="token function">print</span><span class="token punctuation">(</span><span class="token string">"我的名字是<span class="token interpolation"><span class="token delimiter variable">\(</span>name<span class="token delimiter variable">)</span></span>"</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// 此外不确定name能否解包成功</span><span class="token comment" spellcheck="true">// if let 多条件同时满足才能解包成功</span><span class="token keyword">let</span> lastName<span class="token punctuation">:</span> <span class="token builtin">String</span><span class="token operator">?</span> <span class="token operator">=</span> <span class="token string">"Lee"</span><span class="token keyword">if</span> <span class="token keyword">let</span> lastName <span class="token operator">=</span> lastName<span class="token punctuation">,</span> <span class="token keyword">let</span> name <span class="token operator">=</span> name<span class="token punctuation">,</span> <span class="token punctuation">(</span>lastName <span class="token operator">+</span> name<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token builtin">count</span> <span class="token operator">></span> <span class="token number">5</span> <span class="token punctuation">{</span>    <span class="token function">print</span><span class="token punctuation">(</span><span class="token string">"解包成功"</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// guard let 解包 必须在闭包内使用</span><span class="token keyword">func</span> <span class="token function">introduceMyself</span><span class="token punctuation">(</span><span class="token number">_</span> name<span class="token punctuation">:</span> <span class="token builtin">String</span><span class="token operator">?</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">guard</span> <span class="token keyword">let</span> name <span class="token operator">=</span> name <span class="token keyword">else</span> <span class="token punctuation">{</span><span class="token comment" spellcheck="true">//        此处可以处理解包失败的情况</span>        <span class="token keyword">return</span>    <span class="token punctuation">}</span><span class="token comment" spellcheck="true">//    解包成功可以往下继续进行</span>    <span class="token function">print</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token function">introduceMyself</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span>   <span class="token comment" spellcheck="true">//无名</span><span class="token function">introduceMyself</span><span class="token punctuation">(</span><span class="token string">"kim"</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">//kim</span><span class="token comment" spellcheck="true">// Optional Chaining : ?.</span><span class="token keyword">struct</span> <span class="token builtin">Person</span> <span class="token punctuation">{</span>    <span class="token keyword">let</span> name<span class="token punctuation">:</span> <span class="token builtin">String</span>    <span class="token keyword">let</span> tel<span class="token punctuation">:</span> <span class="token builtin">String</span><span class="token operator">?</span><span class="token punctuation">}</span><span class="token keyword">let</span> profile<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token builtin">Person</span><span class="token operator">?</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span>    <span class="token function">Person</span><span class="token punctuation">(</span>name<span class="token punctuation">:</span> <span class="token string">"k"</span><span class="token punctuation">,</span> tel<span class="token punctuation">:</span> <span class="token constant">nil</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token function">Person</span><span class="token punctuation">(</span>name<span class="token punctuation">:</span> <span class="token string">"i"</span><span class="token punctuation">,</span> tel<span class="token punctuation">:</span> <span class="token string">"123456"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token function">Person</span><span class="token punctuation">(</span>name<span class="token punctuation">:</span> <span class="token string">"m"</span><span class="token punctuation">,</span> tel<span class="token punctuation">:</span> <span class="token constant">nil</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token keyword">let</span> phone1 <span class="token operator">=</span> profile<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span>\<span class="token punctuation">.</span><span class="token operator">?</span><span class="token punctuation">.</span>tel<span class="token punctuation">)</span><span class="token function">print</span><span class="token punctuation">(</span>phone1<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//    [nil, Optional("123456"), nil]</span><span class="token keyword">let</span> phone2 <span class="token operator">=</span> profile<span class="token punctuation">.</span><span class="token function">compactMap</span><span class="token punctuation">(</span>\<span class="token punctuation">.</span><span class="token operator">?</span><span class="token punctuation">.</span>tel<span class="token punctuation">)</span><span class="token function">print</span><span class="token punctuation">(</span>phone2<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//    ["123456"]</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> ios </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ios </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ios跟练笔记-Enum</title>
      <link href="/2022/07/19/ios-gen-lian-bi-ji-enum/"/>
      <url>/2022/07/19/ios-gen-lian-bi-ji-enum/</url>
      
        <content type="html"><![CDATA[<h1 id="枚举-Enum"><a href="#枚举-Enum" class="headerlink" title="枚举 Enum"></a>枚举 Enum</h1><pre class=" language-swift"><code class="language-swift"><span class="token comment" spellcheck="true">// 基本使用</span><span class="token keyword">enum</span> <span class="token builtin">Color</span><span class="token punctuation">:</span> <span class="token builtin">String</span> <span class="token punctuation">{</span>    <span class="token keyword">case</span> pink    <span class="token keyword">case</span> red<span class="token punctuation">}</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token string">"我选择的颜色是<span class="token interpolation"><span class="token delimiter variable">\(</span><span class="token builtin">Color</span><span class="token punctuation">.</span>red<span class="token punctuation">.</span>rawValue<span class="token delimiter variable">)</span></span>"</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// 我选择的颜色是red</span><span class="token comment" spellcheck="true">// CaseIterable 是为了能使用allCases属性</span><span class="token comment" spellcheck="true">// CustomStringConvertible 为了使输出的allCases更可读，且赋予值</span><span class="token comment" spellcheck="true">// 以下CustomStringConvertible遵守与否的输出对比</span><span class="token comment" spellcheck="true">// [spring, summer, 秋天, winter]</span><span class="token comment" spellcheck="true">// [__lldb_expr_19.Season.spring,__lldb_expr_19.Season.summer,__lldb_expr_19.Season.fall, __lldb_expr_19.Season.winter]</span><span class="token keyword">enum</span> <span class="token builtin">Season</span><span class="token punctuation">:</span> <span class="token builtin">String</span><span class="token punctuation">,</span> <span class="token builtin">CaseIterable</span><span class="token punctuation">,</span> <span class="token builtin">CustomStringConvertible</span> <span class="token punctuation">{</span>    <span class="token keyword">var</span> description<span class="token punctuation">:</span> <span class="token builtin">String</span> <span class="token punctuation">{</span>        rawValue    <span class="token punctuation">}</span>    <span class="token keyword">case</span> spring<span class="token punctuation">,</span> summer<span class="token punctuation">,</span> fall <span class="token operator">=</span> <span class="token string">"秋天"</span><span class="token punctuation">,</span> winter<span class="token punctuation">}</span><span class="token keyword">let</span> season <span class="token operator">=</span> <span class="token builtin">Season</span><span class="token punctuation">.</span>summer<span class="token function">print</span><span class="token punctuation">(</span>season<span class="token punctuation">)</span><span class="token comment" spellcheck="true">// summer</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token builtin">Season</span><span class="token punctuation">.</span>allCases<span class="token punctuation">)</span><span class="token comment" spellcheck="true">// [spring, summer, 秋天, winter]</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token function">String</span><span class="token punctuation">(</span>describing<span class="token punctuation">:</span> season<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// summer</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token function">String</span><span class="token punctuation">(</span>describing<span class="token punctuation">:</span> <span class="token builtin">Season</span><span class="token punctuation">.</span>allCases<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// [spring, summer, 秋天, winter]</span><span class="token comment" spellcheck="true">// 两个例子</span><span class="token keyword">enum</span> <span class="token builtin">MembershipLevel</span> <span class="token punctuation">:</span> <span class="token builtin">String</span><span class="token punctuation">,</span> <span class="token builtin">CaseIterable</span><span class="token punctuation">,</span> <span class="token builtin">CustomStringConvertible</span> <span class="token punctuation">{</span>    <span class="token keyword">case</span> ordinary<span class="token punctuation">,</span> silver<span class="token punctuation">,</span> gold    <span class="token keyword">enum</span> permission<span class="token punctuation">:</span> <span class="token builtin">String</span><span class="token punctuation">,</span> <span class="token builtin">CaseIterable</span> <span class="token punctuation">{</span>        <span class="token keyword">case</span> watchOldMovies<span class="token punctuation">,</span> skipAds<span class="token punctuation">,</span> downloadMovies<span class="token punctuation">,</span> watchNewMovies    <span class="token punctuation">}</span>    <span class="token keyword">var</span> expense<span class="token punctuation">:</span> <span class="token builtin">Int</span> <span class="token punctuation">{</span>        <span class="token keyword">switch</span> <span class="token keyword">self</span> <span class="token punctuation">{</span>        <span class="token keyword">case</span> <span class="token punctuation">.</span>ordinary<span class="token punctuation">:</span>            <span class="token keyword">return</span> <span class="token number">0</span>        <span class="token keyword">case</span> <span class="token punctuation">.</span>silver<span class="token punctuation">:</span>            <span class="token keyword">return</span> <span class="token number">250</span>        <span class="token keyword">case</span> <span class="token punctuation">.</span>gold<span class="token punctuation">:</span>            <span class="token keyword">return</span> <span class="token number">400</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">var</span> description<span class="token punctuation">:</span> <span class="token builtin">String</span> <span class="token punctuation">{</span>        rawValue    <span class="token punctuation">}</span>    <span class="token keyword">func</span> <span class="token function">canDo</span><span class="token punctuation">(</span><span class="token number">_</span> permission<span class="token punctuation">:</span> permission<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token builtin">Bool</span> <span class="token punctuation">{</span>        <span class="token keyword">switch</span> <span class="token keyword">self</span> <span class="token punctuation">{</span>        <span class="token keyword">case</span> <span class="token punctuation">.</span>ordinary<span class="token punctuation">:</span>            <span class="token keyword">return</span> permission <span class="token operator">==</span> <span class="token punctuation">.</span>watchOldMovies        <span class="token keyword">case</span> <span class="token punctuation">.</span>silver<span class="token punctuation">:</span>            <span class="token keyword">return</span> permission <span class="token operator">!=</span> <span class="token punctuation">.</span>watchNewMovies        <span class="token keyword">case</span> <span class="token punctuation">.</span>gold<span class="token punctuation">:</span>            <span class="token keyword">return</span> <span class="token boolean">true</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">static</span> <span class="token keyword">let</span> allLevel <span class="token operator">=</span> <span class="token builtin">MembershipLevel</span><span class="token punctuation">.</span>allCases<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span>\<span class="token punctuation">.</span>rawValue<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">joined</span><span class="token punctuation">(</span>separator<span class="token punctuation">:</span> <span class="token string">"·"</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token string">"你好，请选择你想要加入的会员类型：<span class="token interpolation"><span class="token delimiter variable">\(</span><span class="token builtin">MembershipLevel</span><span class="token punctuation">.</span>allLevel<span class="token delimiter variable">)</span></span>"</span><span class="token punctuation">)</span><span class="token keyword">let</span> myMemberShip <span class="token operator">=</span> <span class="token builtin">MembershipLevel</span><span class="token punctuation">.</span>allCases<span class="token punctuation">.</span><span class="token function">randomElement</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">!</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token string">"欢迎加入<span class="token interpolation"><span class="token delimiter variable">\(</span>myMemberShip<span class="token delimiter variable">)</span></span>"</span><span class="token punctuation">)</span><span class="token builtin">MembershipLevel</span><span class="token punctuation">.</span>permission<span class="token punctuation">.</span>allCases<span class="token punctuation">.</span>forEach <span class="token punctuation">{</span>    <span class="token keyword">let</span> isAllowed <span class="token operator">=</span> myMemberShip<span class="token punctuation">.</span><span class="token function">canDo</span><span class="token punctuation">(</span>$<span class="token number">0</span><span class="token punctuation">)</span>    <span class="token function">print</span><span class="token punctuation">(</span>isAllowed <span class="token operator">?</span> <span class="token string">"您可以<span class="token interpolation"><span class="token delimiter variable">\(</span>$<span class="token number">0</span><span class="token punctuation">.</span>rawValue<span class="token delimiter variable">)</span></span>"</span> <span class="token punctuation">:</span> <span class="token string">"<span class="token interpolation"><span class="token delimiter variable">\(</span>myMemberShip<span class="token delimiter variable">)</span></span> 无法 <span class="token interpolation"><span class="token delimiter variable">\(</span>$<span class="token number">0</span><span class="token punctuation">.</span>rawValue<span class="token delimiter variable">)</span></span>"</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token keyword">enum</span> <span class="token builtin">Gender</span><span class="token punctuation">:</span> <span class="token builtin">CaseIterable</span><span class="token punctuation">,</span> <span class="token builtin">CustomStringConvertible</span><span class="token punctuation">,</span> <span class="token builtin">RawRepresentable</span> <span class="token punctuation">{</span>    <span class="token keyword">case</span> male<span class="token punctuation">,</span> female<span class="token punctuation">,</span> <span class="token function">other</span><span class="token punctuation">(</span>desc<span class="token punctuation">:</span> <span class="token builtin">String</span> <span class="token operator">=</span> <span class="token string">"其他"</span><span class="token punctuation">)</span>    <span class="token keyword">init</span><span class="token punctuation">(</span>rawValue<span class="token punctuation">:</span> <span class="token builtin">String</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">switch</span> rawValue <span class="token punctuation">{</span>        <span class="token keyword">case</span> <span class="token string">"male"</span><span class="token punctuation">:</span>            <span class="token keyword">self</span> <span class="token operator">=</span> <span class="token punctuation">.</span>male        <span class="token keyword">case</span> <span class="token string">"female"</span><span class="token punctuation">:</span>            <span class="token keyword">self</span> <span class="token operator">=</span> <span class="token punctuation">.</span>female        <span class="token keyword">default</span><span class="token punctuation">:</span>            <span class="token keyword">self</span> <span class="token operator">=</span> <span class="token punctuation">.</span><span class="token function">other</span><span class="token punctuation">(</span>desc<span class="token punctuation">:</span> rawValue<span class="token punctuation">)</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">var</span> rawValue<span class="token punctuation">:</span> <span class="token builtin">String</span> <span class="token punctuation">{</span>        <span class="token keyword">switch</span> <span class="token keyword">self</span> <span class="token punctuation">{</span>        <span class="token keyword">case</span> <span class="token punctuation">.</span>male<span class="token punctuation">:</span>            <span class="token keyword">return</span> <span class="token string">"男"</span>        <span class="token keyword">case</span> <span class="token punctuation">.</span>female<span class="token punctuation">:</span>            <span class="token keyword">return</span> <span class="token string">"女"</span>        <span class="token keyword">case</span> <span class="token punctuation">.</span><span class="token function">other</span><span class="token punctuation">(</span><span class="token keyword">let</span> desc<span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token keyword">return</span> <span class="token string">"其他:"</span> <span class="token operator">+</span> desc        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">var</span> description<span class="token punctuation">:</span> <span class="token builtin">String</span> <span class="token punctuation">{</span>        rawValue    <span class="token punctuation">}</span>    <span class="token keyword">static</span> <span class="token keyword">var</span> allCases<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token builtin">Gender</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">.</span>male<span class="token punctuation">,</span> <span class="token punctuation">.</span>female<span class="token punctuation">,</span> <span class="token punctuation">.</span><span class="token function">other</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">}</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token builtin">Gender</span><span class="token punctuation">.</span>female<span class="token punctuation">)</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token builtin">Gender</span><span class="token punctuation">.</span><span class="token function">other</span><span class="token punctuation">(</span>desc<span class="token punctuation">:</span> <span class="token string">"酷儿"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token builtin">Gender</span><span class="token punctuation">.</span><span class="token function">other</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token builtin">Gender</span><span class="token punctuation">.</span>allCases<span class="token punctuation">)</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> ios </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ios </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ios跟练笔记-@propertyWrapper</title>
      <link href="/2022/07/19/ios-gen-lian-bi-ji-propertywrapper/"/>
      <url>/2022/07/19/ios-gen-lian-bi-ji-propertywrapper/</url>
      
        <content type="html"><![CDATA[<h1 id="属性包装器-propertyWrapper"><a href="#属性包装器-propertyWrapper" class="headerlink" title="属性包装器 @propertyWrapper"></a>属性包装器 @propertyWrapper</h1><pre class=" language-swift"><code class="language-swift">@propertyWrapper<span class="token keyword">struct</span> <span class="token builtin">Validation</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token keyword">var</span> text<span class="token punctuation">:</span> <span class="token builtin">String</span>    <span class="token keyword">private</span> <span class="token keyword">var</span> defaultValue<span class="token punctuation">:</span> <span class="token builtin">String</span>    <span class="token keyword">var</span> isValid<span class="token punctuation">:</span> <span class="token builtin">Bool</span> <span class="token punctuation">{</span>        <span class="token operator">!</span>text<span class="token punctuation">.</span><span class="token builtin">isEmpty</span>    <span class="token punctuation">}</span>        <span class="token keyword">var</span> wrappedValue<span class="token punctuation">:</span> <span class="token builtin">String</span> <span class="token punctuation">{</span>        <span class="token keyword">get</span> <span class="token punctuation">{</span>            text<span class="token punctuation">.</span><span class="token builtin">isEmpty</span> <span class="token operator">?</span> defaultValue <span class="token punctuation">:</span> text        <span class="token punctuation">}</span>        <span class="token keyword">set</span> <span class="token punctuation">{</span>            text <span class="token operator">=</span> newValue        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 只有暴露projectedValue才能在外面使用$name  </span>    <span class="token keyword">var</span> projectedValue<span class="token punctuation">:</span> <span class="token keyword">Self</span> <span class="token punctuation">{</span> <span class="token keyword">self</span> <span class="token punctuation">}</span>        <span class="token keyword">init</span><span class="token punctuation">(</span>wrappedValue<span class="token punctuation">:</span> <span class="token builtin">String</span><span class="token punctuation">,</span> defaultValue<span class="token punctuation">:</span> <span class="token builtin">String</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        text <span class="token operator">=</span> wrappedValue        <span class="token keyword">self</span><span class="token punctuation">.</span>defaultValue <span class="token operator">=</span> defaultValue    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">struct</span> <span class="token builtin">User</span> <span class="token punctuation">{</span>        @<span class="token function">Validation</span><span class="token punctuation">(</span>defaultValue<span class="token punctuation">:</span> <span class="token string">"nobody"</span><span class="token punctuation">)</span> <span class="token keyword">var</span> name<span class="token punctuation">:</span> <span class="token builtin">String</span> <span class="token operator">=</span> <span class="token string">""</span>        <span class="token keyword">func</span> <span class="token function">coding</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>$name<span class="token punctuation">.</span>isValid<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token function">print</span><span class="token punctuation">(</span><span class="token string">"<span class="token interpolation"><span class="token delimiter variable">\(</span>name<span class="token delimiter variable">)</span></span>正在coding"</span><span class="token punctuation">)</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>            <span class="token function">print</span><span class="token punctuation">(</span><span class="token string">"请告诉我谁在coding"</span><span class="token punctuation">)</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">var</span> user <span class="token operator">=</span> <span class="token function">User</span><span class="token punctuation">(</span><span class="token punctuation">)</span>user<span class="token punctuation">.</span><span class="token function">coding</span><span class="token punctuation">(</span><span class="token punctuation">)</span>user<span class="token punctuation">.</span>name <span class="token operator">=</span> <span class="token string">"kim"</span>user<span class="token punctuation">.</span><span class="token function">coding</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">// Result</span><span class="token comment" spellcheck="true">// 请告诉我谁在coding</span><span class="token comment" spellcheck="true">// kim正在coding</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> ios </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ios </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Git日常使用笔记</title>
      <link href="/2022/07/19/git-ri-chang-shi-yong-bi-ji/"/>
      <url>/2022/07/19/git-ri-chang-shi-yong-bi-ji/</url>
      
        <content type="html"><![CDATA[<h1 id="Git日常使用笔记"><a href="#Git日常使用笔记" class="headerlink" title="Git日常使用笔记"></a>Git日常使用笔记</h1><ol><li>查看当前项目的远程仓库地址 git remote -v</li><li>修改当前项目的远程仓库地址 git remote set-url origin [url]</li></ol>]]></content>
      
      
      <categories>
          
          <category> Git </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Git </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CSS3</title>
      <link href="/2022/07/19/css3/"/>
      <url>/2022/07/19/css3/</url>
      
        <content type="html"><![CDATA[<h1 id="CSS3"><a href="#CSS3" class="headerlink" title="CSS3"></a>CSS3</h1><h2 id="1-是什么"><a href="#1-是什么" class="headerlink" title="1. 是什么"></a>1. 是什么</h2><p>css, 即层叠样式表(Cascading Style Sheets)的简称，是一种标记语言，由浏览器解析执行用于使页面变得更美观。</p><p>Css3 是 css 的最新标准， 是向后兼容的，css1/2的特性在css3里都是可以使用的。</p><p>而css3新增了许多新特性，为开发带来了更佳的开发体验。</p><h2 id="2-选择器"><a href="#2-选择器" class="headerlink" title="2. 选择器"></a>2. 选择器</h2><p><img src="https://s2.loli.net/2022/10/21/P7vfUQWAOuCo1Yy.png"></p><h2 id="3-新样式"><a href="#3-新样式" class="headerlink" title="3.新样式"></a>3.新样式</h2><h3 id="border"><a href="#border" class="headerlink" title="border"></a>border</h3><ul><li>border-radius: 圆角边框</li><li>box-shadow: (inset) offset-x offset-y blur-radius spread-radius color</li><li>border-image:  使用图片绘制边框</li></ul><h3 id="background"><a href="#background" class="headerlink" title="background"></a>background</h3><ul><li>background-clip</li></ul><table><thead><tr><th align="center">value</th><th align="center">description</th></tr></thead><tbody><tr><td align="center">padding-box</td><td align="center">背景延伸至内边距外沿</td></tr><tr><td align="center">border-box</td><td align="center">背景延伸至边框外沿（在边框下层）</td></tr><tr><td align="center">content-box</td><td align="center">背景被裁剪至内容区外沿</td></tr><tr><td align="center">text</td><td align="center">背景被裁剪至文字的前景色</td></tr></tbody></table><ul><li>background-origin</li></ul><table><thead><tr><th align="center">value</th><th align="center">description</th></tr></thead><tbody><tr><td align="center">padding-box</td><td align="center">背景图片的摆放以 padding 区域为参考</td></tr><tr><td align="center">border-box</td><td align="center">背景图片的摆放以 border 区域为参考</td></tr><tr><td align="center">content-box</td><td align="center">背景图片的摆放以 content 区域为参考</td></tr></tbody></table><h3 id="word"><a href="#word" class="headerlink" title="word"></a>word</h3><ul><li>word-wrap:</li></ul><table><thead><tr><th align="center">value</th><th align="center">description</th></tr></thead><tbody><tr><td align="center">normal</td><td align="center">使用默认的断行规则</td></tr><tr><td align="center">break-all</td><td align="center">对于 non-CJK (CJK 指中文/日文/韩文) 文本，可在任意字符间断行</td></tr><tr><td align="center">keep-all</td><td align="center">CJK 文本不断行。Non-CJK 文本表现同 <code>normal</code></td></tr></tbody></table><ul><li>text-overflow: 向文本应用阴影。能够规定水平阴影、垂直阴影、模糊距离，以及阴影的颜色</li><li>text-decoration : 是一种简写属性，包含text-decoration-line、text-decoration-color、text-decoration-style、text-decoration-thickness四种属性。</li></ul><table><thead><tr><th align="center">value</th><th align="center">description</th></tr></thead><tbody><tr><td align="center">text-decoration-line</td><td align="center">none、underline(文本的下方有一条修饰线)、overline(文本的上方有一条修饰线)、line-through(有一条贯穿文本中间的修饰线)</td></tr><tr><td align="center">text-decoration-color</td><td align="center">文本修饰的颜色</td></tr><tr><td align="center">text-decoration-style</td><td align="center">solid、double(双实线)、dotted、dashed、wavy(波浪线)</td></tr><tr><td align="center">text-decoration-thickness</td><td align="center">文本修饰线的粗细</td></tr></tbody></table><h3 id="color"><a href="#color" class="headerlink" title="color"></a>color</h3><ul><li>rbga: rgb为颜色，a为透明度</li><li>hsla : h为hue色相，s为saturation饱和度，l为lightness亮度，a为alpha透明度</li></ul><h2 id="4-transition-过渡"><a href="#4-transition-过渡" class="headerlink" title="4. transition 过渡"></a>4. transition 过渡</h2><p>transition 是 transition-property, transition-duration, transition-timing-function 和 transition-delay的一个简写属性。</p><table><thead><tr><th align="center">value</th><th align="center">description</th></tr></thead><tbody><tr><td align="center">transition-property</td><td align="center">应用过渡属性的名称，如果指定的是一个简写属性，那么简写属性的所有属性都将应用过渡属性。</td></tr><tr><td align="center">transition-duration</td><td align="center">以秒或毫秒为单位指定过渡动画所需的时间</td></tr><tr><td align="center">transition-timing-function</td><td align="center">ease、ease-in、ease-out、ease-in-out、linear、step-start、step-end、steps(4, end)</td></tr><tr><td align="center">transition-delay</td><td align="center">规定了在过渡效果开始作用之前需要等待的时间</td></tr></tbody></table><h2 id="5-transform-转换"><a href="#5-transform-转换" class="headerlink" title="5. transform 转换"></a>5. transform 转换</h2><p>transform: scale / translate / rotate</p><h2 id="6-animation-动画"><a href="#6-animation-动画" class="headerlink" title="6. animation 动画"></a>6. animation 动画</h2><p>动画这个平常用的也很多，主要是做一个预设的动画。和一些页面交互的动画效果，结果和过渡应该一样，让页面不会那么生硬</p><p>animation也有很多的属性</p><ul><li>animation-name：动画名称</li><li>animation-duration：动画持续时间</li><li>animation-timing-function：动画时间函数</li><li>animation-delay：动画延迟时间</li><li>animation-iteration-count：动画执行次数，可以设置为一个整数，也可以设置为infinite，意思是无限循环</li><li>animation-direction：动画执行方向</li><li>animation-paly-state：动画播放状态</li><li>animation-fill-mode：动画填充模式</li></ul><h2 id="7-渐变"><a href="#7-渐变" class="headerlink" title="7. 渐变"></a>7. 渐变</h2><p>颜色渐变是指在两个颜色之间平稳的过渡，<code>css3</code>渐变包括</p><ul><li>linear-gradient：线性渐变</li></ul><blockquote><p>background-image: linear-gradient(direction, color-stop1, color-stop2, …);</p></blockquote><ul><li>radial-gradient：径向渐变</li></ul><blockquote><p>linear-gradient(0deg, red, green);</p></blockquote><h2 id="8-reflect-反射"><a href="#8-reflect-反射" class="headerlink" title="8. reflect 反射"></a>8. reflect 反射</h2><pre class=" language-css"><code class="language-css"><span class="token property">-webkit-box-reflect</span><span class="token punctuation">:</span>方向[ above-上 | below-下 | right-右 | left-左 ]，偏移量，遮罩图片</code></pre><h2 id="9-filter-滤镜"><a href="#9-filter-滤镜" class="headerlink" title="9. filter 滤镜"></a>9. filter 滤镜</h2><pre><code>filter: [ grayscale(100%)-黑白色filter | sepia(1)-褐色 | saturate(2)-饱和度 | hue-rotate(90deg)-色相旋转 | invert(1)-反色 | opacity(.5)-透明度 | brightness(.5)-亮度 | contrast(2)-对比度 | blur(3px)-模糊度 | drop-shaodw(5px 5px 5px #000)-阴影]</code></pre><h2 id="10-多列布局"><a href="#10-多列布局" class="headerlink" title="10. 多列布局"></a>10. 多列布局</h2><p><img src="https://s2.loli.net/2022/10/21/hH9XoUPtNa3AqyG.png" alt="image-20221021150340219.png"></p><h2 id="11-盒模型定义"><a href="#11-盒模型定义" class="headerlink" title="11. 盒模型定义"></a>11. 盒模型定义</h2><pre class=" language-css"><code class="language-css"><span class="token property">box-sizing</span><span class="token punctuation">:</span> [<span class="token function">border-box</span><span class="token punctuation">(</span>border+padding+content<span class="token punctuation">)</span> | <span class="token function">content-box</span><span class="token punctuation">(</span>content<span class="token punctuation">)</span>]</code></pre><h2 id="12-媒体查询"><a href="#12-媒体查询" class="headerlink" title="12. 媒体查询"></a>12. 媒体查询</h2><p><img src="https://s2.loli.net/2022/10/21/WYVjyl9rfRP7D3o.png" alt="image-20221021150724104.png"></p><h2 id="13-其他"><a href="#13-其他" class="headerlink" title="13. 其他"></a>13. 其他</h2><p>flex布局（弹性布局）：<a href="https://www.ruanyifeng.com/blog/2015/07/flex-grammar.html">https://www.ruanyifeng.com/blog/2015/07/flex-grammar.html</a></p><p>grid布局（栅格布局）:   <a href="https://www.ruanyifeng.com/blog/2019/03/grid-layout-tutorial.html">https://www.ruanyifeng.com/blog/2019/03/grid-layout-tutorial.html</a></p><p>混合模式：background-blend-mode 、mix-blend-mode</p>]]></content>
      
      
      <categories>
          
          <category> CSS3 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CSS3 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>HTML5</title>
      <link href="/2022/07/19/html5/"/>
      <url>/2022/07/19/html5/</url>
      
        <content type="html"><![CDATA[<h1 id="HTML5"><a href="#HTML5" class="headerlink" title="HTML5"></a>HTML5</h1><h2 id="1-语义化标签"><a href="#1-语义化标签" class="headerlink" title="1. 语义化标签"></a>1. 语义化标签</h2><p><img src="https://s2.loli.net/2022/10/21/PsZYNSTvpmywQLi.png"></p><h2 id="2-增强型表单"><a href="#2-增强型表单" class="headerlink" title="2. 增强型表单"></a>2. 增强型表单</h2><p><img src="https://s2.loli.net/2022/10/21/UOwVYl2eSRqDcPX.png"></p><p><img src="https://s2.loli.net/2022/10/21/hyEloatJQ4Sn5uO.png"></p><p><img src="https://s2.loli.net/2022/10/21/mMJ8qaVuZRyEhIG.png"></p><h2 id="3-音视频标签"><a href="#3-音视频标签" class="headerlink" title="3. 音视频标签"></a>3. 音视频标签</h2><p><a href="https://developer.mozilla.org/zh-CN/docs/Web/HTML/Element/video">https://developer.mozilla.org/zh-CN/docs/Web/HTML/Element/video</a></p><p><a href="https://developer.mozilla.org/zh-CN/docs/Web/HTML/Element/audio">https://developer.mozilla.org/zh-CN/docs/Web/HTML/Element/audio</a></p><h2 id="4-Canvas绘图"><a href="#4-Canvas绘图" class="headerlink" title="4. Canvas绘图"></a>4. Canvas绘图</h2><p><a href="https://developer.mozilla.org/zh-CN/docs/Web/API/Canvas_API">https://developer.mozilla.org/zh-CN/docs/Web/API/Canvas_API</a></p><h2 id="5-SVG绘图"><a href="#5-SVG绘图" class="headerlink" title="5. SVG绘图"></a>5. SVG绘图</h2><p><a href="https://developer.mozilla.org/zh-CN/docs/Web/SVG/Tutorial/Getting_Started">https://developer.mozilla.org/zh-CN/docs/Web/SVG/Tutorial/Getting_Started</a></p><h2 id="6-地理定位"><a href="#6-地理定位" class="headerlink" title="6. 地理定位"></a>6. 地理定位</h2><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">var</span> options <span class="token operator">=</span> <span class="token punctuation">{</span>  enableHighAccuracy<span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>  timeout<span class="token punctuation">:</span> <span class="token number">5000</span><span class="token punctuation">,</span>  maximumAge<span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">function</span> <span class="token function">success</span><span class="token punctuation">(</span>pos<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">var</span> crd <span class="token operator">=</span> pos<span class="token punctuation">.</span>coords<span class="token punctuation">;</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'Your current position is:'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'Latitude : '</span> <span class="token operator">+</span> crd<span class="token punctuation">.</span>latitude<span class="token punctuation">)</span><span class="token punctuation">;</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'Longitude: '</span> <span class="token operator">+</span> crd<span class="token punctuation">.</span>longitude<span class="token punctuation">)</span><span class="token punctuation">;</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'More or less '</span> <span class="token operator">+</span> crd<span class="token punctuation">.</span>accuracy <span class="token operator">+</span> <span class="token string">' meters.'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">function</span> <span class="token function">error</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span> <span class="token punctuation">{</span>  console<span class="token punctuation">.</span><span class="token function">warn</span><span class="token punctuation">(</span><span class="token string">'ERROR('</span> <span class="token operator">+</span> err<span class="token punctuation">.</span>code <span class="token operator">+</span> <span class="token string">'): '</span> <span class="token operator">+</span> err<span class="token punctuation">.</span>message<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span>navigator<span class="token punctuation">.</span>geolocation<span class="token punctuation">.</span><span class="token function">getCurrentPosition</span><span class="token punctuation">(</span>success<span class="token punctuation">,</span> error<span class="token punctuation">,</span> options<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h2 id="7-拖放API"><a href="#7-拖放API" class="headerlink" title="7. 拖放API"></a>7. 拖放API</h2><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">draggable</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>true<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span> // div添加draggable为true才可拖动</code></pre><p><img src="https://s2.loli.net/2022/10/21/uwND1vGztZJPVgH.png"></p><h2 id="8-WebWorker"><a href="#8-WebWorker" class="headerlink" title="8. WebWorker"></a>8. WebWorker</h2><p><img src="https://s2.loli.net/2022/10/21/SIZtqa5U89FEmcH.png"></p><h2 id="9-WebStorage"><a href="#9-WebStorage" class="headerlink" title="9. WebStorage"></a>9. WebStorage</h2><p><img src="https://s2.loli.net/2022/10/21/sWjtfqz3OplG2m1.png"></p><h2 id="10-WebSocket"><a href="#10-WebSocket" class="headerlink" title="10. WebSocket"></a>10. WebSocket</h2><p><a href="https://developer.mozilla.org/zh-CN/docs/Web/API/WebSocket">https://developer.mozilla.org/zh-CN/docs/Web/API/WebSocket</a></p>]]></content>
      
      
      <categories>
          
          <category> H5 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> H5 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>somethingUseful</title>
      <link href="/2022/07/12/somethinguseful/"/>
      <url>/2022/07/12/somethinguseful/</url>
      
        <content type="html"><![CDATA[<h1 id="Something-Useful"><a href="#Something-Useful" class="headerlink" title="Something Useful"></a>Something Useful</h1><ol><li><p>uniapp条件编译</p><p><a href="https://blog.csdn.net/zz975896590/article/details/119990966?ops_request_misc=%257B%2522request%255Fid%2522%253A%2522163757151916780261994750%2522%252C%2522scm%2522%253A%252220140713.130102334.pc%255Fall.%2522%257D&amp;request_id=163757151916780261994750&amp;biz_id=0&amp;utm_medium=distribute.pc_search_result.none-task-blog-2~all~first_rank_ecpm_v1~times_rank-3-119990966.pc_search_result_control_group&amp;utm_term=//+%23ifdef+MP-ALIPAY+%E5%92%8C+//+%23endif&amp;spm=1018.2226.3001.4187">https://blog.csdn.net/zz975896590/article/details/119990966?ops_request_misc=%257B%2522request%255Fid%2522%253A%2522163757151916780261994750%2522%252C%2522scm%2522%253A%252220140713.130102334.pc%255Fall.%2522%257D&amp;request_id=163757151916780261994750&amp;biz_id=0&amp;utm_medium=distribute.pc_search_result.none-task-blog-2~all~first_rank_ecpm_v1~times_rank-3-119990966.pc_search_result_control_group&amp;utm_term=%2F%2F+%23ifdef+MP-ALIPAY+%E5%92%8C+%2F%2F+%23endif&amp;spm=1018.2226.3001.4187</a></p></li><li><p>Git常用命令大全</p><p><a href="https://blog.csdn.net/halaoda/article/details/78661334?ops_request_misc=%257B%2522request%255Fid%2522%253A%2522163763197916780271562140%2522%252C%2522scm%2522%253A%252220140713.130102334..%2522%257D&amp;request_id=163763197916780271562140&amp;biz_id=0&amp;utm_medium=distribute.pc_search_result.none-task-blog-2~all~top_positive~default-1-78661334.pc_search_result_control_group&amp;utm_term=git%E5%91%BD%E4%BB%A4&amp;spm=1018.2226.3001.4187">https://blog.csdn.net/halaoda/article/details/78661334?ops_request_misc=%257B%2522request%255Fid%2522%253A%2522163763197916780271562140%2522%252C%2522scm%2522%253A%252220140713.130102334..%2522%257D&amp;request_id=163763197916780271562140&amp;biz_id=0&amp;utm_medium=distribute.pc_search_result.none-task-blog-2~all~top_positive~default-1-78661334.pc_search_result_control_group&amp;utm_term=git%E5%91%BD%E4%BB%A4&amp;spm=1018.2226.3001.4187</a></p></li><li><p>Mac系统移动npm的全局目录，解决安装权限问题</p><p><a href="https://blog.csdn.net/n5/article/details/101205909?ops_request_misc=%257B%2522request%255Fid%2522%253A%2522163763428116780271556606%2522%252C%2522scm%2522%253A%252220140713.130102334.pc%255Fall.%2522%257D&amp;request_id=163763428116780271556606&amp;biz_id=0&amp;utm_medium=distribute.pc_search_result.none-task-blog-2~all~first_rank_ecpm_v1~rank_v31_ecpm-9-101205909.pc_search_result_control_group&amp;utm_term=mac%E7%B3%BB%E7%BB%9F%E4%B8%8B%E4%BF%AE%E6%94%B9node%E6%96%87%E4%BB%B6%E8%B7%AF%E5%BE%84&amp;spm=1018.2226.3001.4187">https://blog.csdn.net/n5/article/details/101205909?ops_request_misc=%257B%2522request%255Fid%2522%253A%2522163763428116780271556606%2522%252C%2522scm%2522%253A%252220140713.130102334.pc%255Fall.%2522%257D&amp;request_id=163763428116780271556606&amp;biz_id=0&amp;utm_medium=distribute.pc_search_result.none-task-blog-2~all~first_rank_ecpm_v1~rank_v31_ecpm-9-101205909.pc_search_result_control_group&amp;utm_term=mac%E7%B3%BB%E7%BB%9F%E4%B8%8B%E4%BF%AE%E6%94%B9node%E6%96%87%E4%BB%B6%E8%B7%AF%E5%BE%84&amp;spm=1018.2226.3001.4187</a></p></li><li><p>js中!!()的作用</p><p><a href="https://blog.csdn.net/qq_31411389/article/details/70332999?ops_request_misc=&amp;request_id=&amp;biz_id=102&amp;utm_term=!%E7%9A%84%E4%BD%9C%E7%94%A8&amp;utm_medium=distribute.pc_search_result.none-task-blog-2~all~sobaiduweb~default-0-70332999.pc_search_result_control_group&amp;spm=1018.2226.3001.4187">https://blog.csdn.net/qq_31411389/article/details/70332999?ops_request_misc=&amp;request_id=&amp;biz_id=102&amp;utm_term=!%E7%9A%84%E4%BD%9C%E7%94%A8&amp;utm_medium=distribute.pc_search_result.none-task-blog-2~all~sobaiduweb~default-0-70332999.pc_search_result_control_group&amp;spm=1018.2226.3001.4187</a></p></li><li><p>【Mac环境】zsh: command not found</p><p><a href="https://blog.csdn.net/qq_45138778/article/details/109998151?ops_request_misc=%257B%2522request%255Fid%2522%253A%2522163771873616780264035423%2522%252C%2522scm%2522%253A%252220140713.130102334.pc%255Fall.%2522%257D&amp;request_id=163771873616780264035423&amp;biz_id=0&amp;utm_medium=distribute.pc_search_result.none-task-blog-2~all~first_rank_ecpm_v1~rank_v31_ecpm-6-109998151.pc_search_result_control_group&amp;utm_term=command+not+found:+yarn&amp;spm=1018.2226.3001.4187">https://blog.csdn.net/qq_45138778/article/details/109998151?ops_request_misc=%257B%2522request%255Fid%2522%253A%2522163771873616780264035423%2522%252C%2522scm%2522%253A%252220140713.130102334.pc%255Fall.%2522%257D&amp;request_id=163771873616780264035423&amp;biz_id=0&amp;utm_medium=distribute.pc_search_result.none-task-blog-2~all~first_rank_ecpm_v1~rank_v31_ecpm-6-109998151.pc_search_result_control_group&amp;utm_term=command+not+found%3A+yarn&amp;spm=1018.2226.3001.4187</a></p></li><li><p>镜像快速安装homebrew教程</p><p><a href="https://brew.idayer.com/">https://brew.idayer.com/</a></p></li><li><p>URL详解以及encodeURI、encodeURIComponent、decodeURI、decodeURIComponent的区别</p><p><a href="https://blog.csdn.net/a1056244734/article/details/107689148?ops_request_misc=&amp;request_id=&amp;biz_id=102&amp;utm_term=encodeURIComponen%E5%92%8CdecodeURICom&amp;utm_medium=distribute.pc_search_result.none-task-blog-2~all~sobaiduweb~default-2-107689148.pc_search_result_control_group&amp;spm=1018.2226.3001.4187">https://blog.csdn.net/a1056244734/article/details/107689148?ops_request_misc=&amp;request_id=&amp;biz_id=102&amp;utm_term=encodeURIComponen%E5%92%8CdecodeURICom&amp;utm_medium=distribute.pc_search_result.none-task-blog-2~all~sobaiduweb~default-2-107689148.pc_search_result_control_group&amp;spm=1018.2226.3001.4187</a></p></li><li><p>mac软件下载</p><p><a href="https://macwk.com/">https://macwk.com/</a></p></li><li><p>解决跨域的n中办法</p><p><a href="https://juejin.cn/post/6940501044447150088">https://juejin.cn/post/6940501044447150088</a></p></li><li><p>uniapp 小程序打包发布</p><p><a href="https://blog.csdn.net/weixin_43638968/article/details/109119697?ops_request_misc=%257B%2522request%255Fid%2522%253A%2522163834937716780261973318%2522%252C%2522scm%2522%253A%252220140713.130102334.pc%255Fall.%2522%257D&amp;request_id=163834937716780261973318&amp;biz_id=0&amp;utm_medium=distribute.pc_search_result.none-task-blog-2~all~first_rank_ecpm_v1~rank_v31_ecpm-4-109119697.pc_search_result_control_group&amp;utm_term=%E5%A6%82%E4%BD%95%E5%B0%86%E5%B0%8F%E7%A8%8B%E5%BA%8F%E6%89%93%E5%8C%85%E5%B9%B6%E6%8F%90%E4%BA%A4%E5%AE%A1%E6%A0%B8&amp;spm=1018.2226.3001.4187">https://blog.csdn.net/weixin_43638968/article/details/109119697?ops_request_misc=%257B%2522request%255Fid%2522%253A%2522163834937716780261973318%2522%252C%2522scm%2522%253A%252220140713.130102334.pc%255Fall.%2522%257D&amp;request_id=163834937716780261973318&amp;biz_id=0&amp;utm_medium=distribute.pc_search_result.none-task-blog-2~all~first_rank_ecpm_v1~rank_v31_ecpm-4-109119697.pc_search_result_control_group&amp;utm_term=%E5%A6%82%E4%BD%95%E5%B0%86%E5%B0%8F%E7%A8%8B%E5%BA%8F%E6%89%93%E5%8C%85%E5%B9%B6%E6%8F%90%E4%BA%A4%E5%AE%A1%E6%A0%B8&amp;spm=1018.2226.3001.4187</a></p></li><li><p>vscode 高效开心开发uniapp</p><p><a href="https://blog.csdn.net/wallowyou/article/details/119715438?ops_request_misc=%257B%2522request%255Fid%2522%253A%2522163841396316780265419596%2522%252C%2522scm%2522%253A%252220140713.130102334.pc%255Fall.%2522%257D&amp;request_id=163841396316780265419596&amp;biz_id=0&amp;utm_medium=distribute.pc_search_result.none-task-blog-2~all~first_rank_ecpm_v1~rank_v31_ecpm-1-119715438.pc_search_result_control_group&amp;utm_term=%E5%9C%A8vscode%E4%B8%AD%E4%BD%BF%E7%94%A8uniapp%E7%BB%84%E4%BB%B6&amp;spm=1018.2226.3001.4187">https://blog.csdn.net/wallowyou/article/details/119715438?ops_request_misc=%257B%2522request%255Fid%2522%253A%2522163841396316780265419596%2522%252C%2522scm%2522%253A%252220140713.130102334.pc%255Fall.%2522%257D&amp;request_id=163841396316780265419596&amp;biz_id=0&amp;utm_medium=distribute.pc_search_result.none-task-blog-2~all~first_rank_ecpm_v1~rank_v31_ecpm-1-119715438.pc_search_result_control_group&amp;utm_term=%E5%9C%A8vscode%E4%B8%AD%E4%BD%BF%E7%94%A8uniapp%E7%BB%84%E4%BB%B6&amp;spm=1018.2226.3001.4187</a></p></li><li><p>axios笔记</p><p><a href="https://blog.csdn.net/qq_43279324/article/details/121626044?utm_medium=distribute.pc_category.none-task-blog-hot-19.nonecase&amp;depth_1-utm_source=distribute.pc_category.none-task-blog-hot-19.nonecase">https://blog.csdn.net/qq_43279324/article/details/121626044?utm_medium=distribute.pc_category.none-task-blog-hot-19.nonecase&amp;depth_1-utm_source=distribute.pc_category.none-task-blog-hot-19.nonecase</a></p></li><li><p>正则表达式-菜鸟教程</p><p><a href="https://www.runoob.com/regexp/regexp-tutorial.html">https://www.runoob.com/regexp/regexp-tutorial.html</a></p></li><li><p>CSS Grid 网格布局教程</p><p><a href="https://www.ruanyifeng.com/blog/2019/03/grid-layout-tutorial.html">https://www.ruanyifeng.com/blog/2019/03/grid-layout-tutorial.html</a></p></li><li><p>Flex 布局教程：语法篇</p><p><a href="https://www.ruanyifeng.com/blog/2015/07/flex-grammar.html">https://www.ruanyifeng.com/blog/2015/07/flex-grammar.html</a></p></li><li><p>JavaScript 教程</p><p><a href="https://wangdoc.com/javascript/index.html">https://wangdoc.com/javascript/index.html</a></p></li><li><p>写给初中级前端的高级进阶指南</p><p><a href="https://juejin.cn/post/6844904103504527374">https://juejin.cn/post/6844904103504527374</a></p></li><li><p>深入理解CSS选择器优先级</p><p><a href="https://juejin.cn/post/6844903709772611592">https://juejin.cn/post/6844903709772611592</a></p></li><li><p>【最全】微信支付宝小程序蓝牙API开锁全流程</p><p><a href="https://blog.csdn.net/guohaosir/article/details/120972027?ops_request_misc=%257B%2522request%255Fid%2522%253A%2522164551167316780274198073%2522%252C%2522scm%2522%253A%252220140713.130102334.pc%255Fall.%2522%257D&amp;request_id=164551167316780274198073&amp;biz_id=0&amp;utm_medium=distribute.pc_search_result.none-task-blog-2~all~first_rank_ecpm_v1~rank_v31_ecpm-1-120972027.first_rank_v2_pc_rank_v29&amp;utm_term=%E6%94%AF%E4%BB%98%E5%AE%9D%E5%B0%8F%E7%A8%8B%E5%BA%8F%E8%93%9D%E7%89%99%E8%A7%A3%E6%9E%90&amp;spm=1018.2226.3001.4187">https://blog.csdn.net/guohaosir/article/details/120972027?ops_request_misc=%257B%2522request%255Fid%2522%253A%2522164551167316780274198073%2522%252C%2522scm%2522%253A%252220140713.130102334.pc%255Fall.%2522%257D&amp;request_id=164551167316780274198073&amp;biz_id=0&amp;utm_medium=distribute.pc_search_result.none-task-blog-2~all~first_rank_ecpm_v1~rank_v31_ecpm-1-120972027.first_rank_v2_pc_rank_v29&amp;utm_term=%E6%94%AF%E4%BB%98%E5%AE%9D%E5%B0%8F%E7%A8%8B%E5%BA%8F%E8%93%9D%E7%89%99%E8%A7%A3%E6%9E%90&amp;spm=1018.2226.3001.4187</a></p></li><li><p>react-router-dom v6 使用</p><p><a href="https://blog.csdn.net/weixin_44051815/article/details/121413076?ops_request_misc=%257B%2522request%255Fid%2522%253A%2522164559648116780269822778%2522%252C%2522scm%2522%253A%252220140713.130102334.pc%255Fall.%2522%257D&amp;request_id=164559648116780269822778&amp;biz_id=0&amp;utm_medium=distribute.pc_search_result.none-task-blog-2~all~first_rank_ecpm_v1~rank_v31_ecpm-17-121413076.first_rank_v2_pc_rank_v29&amp;utm_term=react-router+v6+%E4%BA%8C%E7%BA%A7%E8%B7%AF%E7%94%B1&amp;spm=1018.2226.3001.4187">https://blog.csdn.net/weixin_44051815/article/details/121413076?ops_request_misc=%257B%2522request%255Fid%2522%253A%2522164559648116780269822778%2522%252C%2522scm%2522%253A%252220140713.130102334.pc%255Fall.%2522%257D&amp;request_id=164559648116780269822778&amp;biz_id=0&amp;utm_medium=distribute.pc_search_result.none-task-blog-2~all~first_rank_ecpm_v1~rank_v31_ecpm-17-121413076.first_rank_v2_pc_rank_v29&amp;utm_term=react-router+v6+%E4%BA%8C%E7%BA%A7%E8%B7%AF%E7%94%B1&amp;spm=1018.2226.3001.4187</a></p></li><li><p>快速上手react-router@6新版路由</p><p><a href="https://juejin.cn/post/7065139910822346782#heading-6">https://juejin.cn/post/7065139910822346782#heading-6</a></p></li><li><p>详解：如何在NPM上发布自己的第一个Vue组件库</p><p><a href="https://blog.csdn.net/qq_35658349/article/details/103223178?ops_request_misc=%257B%2522request%255Fid%2522%253A%2522164638841916780261948275%2522%252C%2522scm%2522%253A%252220140713.130102334.pc%255Fall.%2522%257D&amp;request_id=164638841916780261948275&amp;biz_id=0&amp;utm_medium=distribute.pc_search_result.none-task-blog-2~all~first_rank_ecpm_v1~rank_v31_ecpm-2-103223178.pc_search_result_control_group&amp;utm_term=npm+%E4%B8%80%E4%B8%AA%E8%87%AA%E5%B7%B1%E7%9A%84%E5%BA%93&amp;spm=1018.2226.3001.4187">https://blog.csdn.net/qq_35658349/article/details/103223178?ops_request_misc=%257B%2522request%255Fid%2522%253A%2522164638841916780261948275%2522%252C%2522scm%2522%253A%252220140713.130102334.pc%255Fall.%2522%257D&amp;request_id=164638841916780261948275&amp;biz_id=0&amp;utm_medium=distribute.pc_search_result.none-task-blog-2~all~first_rank_ecpm_v1~rank_v31_ecpm-2-103223178.pc_search_result_control_group&amp;utm_term=npm+%E4%B8%80%E4%B8%AA%E8%87%AA%E5%B7%B1%E7%9A%84%E5%BA%93&amp;spm=1018.2226.3001.4187</a></p></li><li><p>助你上手Vue3全家桶之Vue3教程</p><p><a href="https://blog.csdn.net/pdd11997110103/article/details/121035412?ops_request_misc=%257B%2522request%255Fid%2522%253A%2522164672821316780357283729%2522%252C%2522scm%2522%253A%252220140713.130102334..%2522%257D&amp;request_id=164672821316780357283729&amp;biz_id=0&amp;utm_medium=distribute.pc_search_result.none-task-blog-2~all~top_positive~default-1-121035412.pc_search_result_control_group&amp;utm_term=vue3&amp;spm=1018.2226.3001.4187">https://blog.csdn.net/pdd11997110103/article/details/121035412?ops_request_misc=%257B%2522request%255Fid%2522%253A%2522164672821316780357283729%2522%252C%2522scm%2522%253A%252220140713.130102334..%2522%257D&amp;request_id=164672821316780357283729&amp;biz_id=0&amp;utm_medium=distribute.pc_search_result.none-task-blog-2~all~top_positive~default-1-121035412.pc_search_result_control_group&amp;utm_term=vue3&amp;spm=1018.2226.3001.4187</a></p></li><li><p>微信小程序连接蓝牙设备流程（一）</p><p><a href="https://blog.csdn.net/old_brown/article/details/113876226?ops_request_misc=%257B%2522request%255Fid%2522%253A%2522164722779916780269887775%2522%252C%2522scm%2522%253A%252220140713.130102334.pc%255Fall.%2522%257D&amp;request_id=164722779916780269887775&amp;biz_id=0&amp;utm_medium=distribute.pc_search_result.none-task-blog-2~all~first_rank_ecpm_v1~times_rank-3-113876226.pc_search_result_control_group&amp;utm_term=%E5%BE%AE%E4%BF%A1%E8%93%9D%E7%89%99%E9%93%BE%E6%8E%A5&amp;spm=1018.2226.3001.4187">https://blog.csdn.net/old_brown/article/details/113876226?ops_request_misc=%257B%2522request%255Fid%2522%253A%2522164722779916780269887775%2522%252C%2522scm%2522%253A%252220140713.130102334.pc%255Fall.%2522%257D&amp;request_id=164722779916780269887775&amp;biz_id=0&amp;utm_medium=distribute.pc_search_result.none-task-blog-2~all~first_rank_ecpm_v1~times_rank-3-113876226.pc_search_result_control_group&amp;utm_term=%E5%BE%AE%E4%BF%A1%E8%93%9D%E7%89%99%E9%93%BE%E6%8E%A5&amp;spm=1018.2226.3001.4187</a></p></li><li><p>微信小程序对接蓝牙设备连接</p><p><a href="https://blog.csdn.net/qq_43384836/article/details/121632237?ops_request_misc=%257B%2522request%255Fid%2522%253A%2522164722779916780269887775%2522%252C%2522scm%2522%253A%252220140713.130102334.pc%255Fall.%2522%257D&amp;request_id=164722779916780269887775&amp;biz_id=0&amp;utm_medium=distribute.pc_search_result.none-task-blog-2~all~first_rank_ecpm_v1~times_rank-4-121632237.pc_search_result_control_group&amp;utm_term=%E5%BE%AE%E4%BF%A1%E8%93%9D%E7%89%99%E9%93%BE%E6%8E%A5&amp;spm=1018.2226.3001.4187">https://blog.csdn.net/qq_43384836/article/details/121632237?ops_request_misc=%257B%2522request%255Fid%2522%253A%2522164722779916780269887775%2522%252C%2522scm%2522%253A%252220140713.130102334.pc%255Fall.%2522%257D&amp;request_id=164722779916780269887775&amp;biz_id=0&amp;utm_medium=distribute.pc_search_result.none-task-blog-2~all~first_rank_ecpm_v1~times_rank-4-121632237.pc_search_result_control_group&amp;utm_term=%E5%BE%AE%E4%BF%A1%E8%93%9D%E7%89%99%E9%93%BE%E6%8E%A5&amp;spm=1018.2226.3001.4187</a></p></li><li><p>史上最全算法学习资料整理</p><p><a href="https://blog.csdn.net/wxkongkong/article/details/104886555?ops_request_misc=%257B%2522request%255Fid%2522%253A%2522164758618916780357256070%2522%252C%2522scm%2522%253A%252220140713.130102334..%2522%257D&amp;request_id=164758618916780357256070&amp;biz_id=0&amp;utm_medium=distribute.pc_search_result.none-task-blog-2~all~top_positive~default-1-104886555.142%5Ev2%5Epc_search_result_control_group,143%5Ev4%5Eregister&amp;utm_term=%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0&amp;spm=1018.2226.3001.4187">https://blog.csdn.net/wxkongkong/article/details/104886555?ops_request_misc=%257B%2522request%255Fid%2522%253A%2522164758618916780357256070%2522%252C%2522scm%2522%253A%252220140713.130102334..%2522%257D&amp;request_id=164758618916780357256070&amp;biz_id=0&amp;utm_medium=distribute.pc_search_result.none-task-blog-2~all~top_positive~default-1-104886555.142^v2^pc_search_result_control_group,143^v4^register&amp;utm_term=%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0&amp;spm=1018.2226.3001.4187</a></p></li><li><p>一名【合格】前端工程师的自检清单</p><p><a href="https://juejin.cn/post/6844903830887366670">https://juejin.cn/post/6844903830887366670</a></p></li><li><p>Git常见操作</p><p><a href="https://blog.csdn.net/Ye_GuoLin/article/details/122410808?ops_request_misc=%257B%2522request%255Fid%2522%253A%2522164981972616782248516146%2522%252C%2522scm%2522%253A%252220140713.130102334.pc%255Fall.%2522%257D&amp;request_id=164981972616782248516146&amp;biz_id=0&amp;utm_medium=distribute.pc_search_result.none-task-blog-2~all~first_rank_ecpm_v1~times_rank-1-122410808.142%5Ev7%5Epc_search_result_control_group,157%5Ev4%5Enew_style&amp;utm_term=%E6%9C%AC%E5%9C%B0%E5%88%9B%E5%BB%BA%E6%96%B0%E5%88%86%E6%94%AF%E5%B9%B6%E6%8E%A8%E9%80%81%E5%88%B0%E4%BB%93%E5%BA%93&amp;spm=1018.2226.3001.4187">https://blog.csdn.net/Ye_GuoLin/article/details/122410808?ops_request_misc=%257B%2522request%255Fid%2522%253A%2522164981972616782248516146%2522%252C%2522scm%2522%253A%252220140713.130102334.pc%255Fall.%2522%257D&amp;request_id=164981972616782248516146&amp;biz_id=0&amp;utm_medium=distribute.pc_search_result.none-task-blog-2~all~first_rank_ecpm_v1~times_rank-1-122410808.142^v7^pc_search_result_control_group,157^v4^new_style&amp;utm_term=%E6%9C%AC%E5%9C%B0%E5%88%9B%E5%BB%BA%E6%96%B0%E5%88%86%E6%94%AF%E5%B9%B6%E6%8E%A8%E9%80%81%E5%88%B0%E4%BB%93%E5%BA%93&amp;spm=1018.2226.3001.4187</a></p></li><li><p>iOS14+Swift5.x+Xcode12学习笔记（3）——可视化控件</p><p><a href="https://blog.csdn.net/qq_45841183/article/details/121727842?ops_request_misc=%257B%2522request%255Fid%2522%253A%2522165027151916782089350081%2522%252C%2522scm%2522%253A%252220140713.130102334.pc%255Fall.%2522%257D&amp;request_id=165027151916782089350081&amp;biz_id=0&amp;utm_medium=distribute.pc_search_result.none-task-blog-2~all~first_rank_ecpm_v1~times_rank-16-121727842.142%5Ev9%5Epc_search_result_control_group,157%5Ev4%5Enew_style&amp;utm_term=uibutton%E8%AE%BE%E7%BD%AE%E5%AE%BD%E9%AB%98&amp;spm=1018.2226.3001.4187">https://blog.csdn.net/qq_45841183/article/details/121727842?ops_request_misc=%257B%2522request%255Fid%2522%253A%2522165027151916782089350081%2522%252C%2522scm%2522%253A%252220140713.130102334.pc%255Fall.%2522%257D&amp;request_id=165027151916782089350081&amp;biz_id=0&amp;utm_medium=distribute.pc_search_result.none-task-blog-2~all~first_rank_ecpm_v1~times_rank-16-121727842.142^v9^pc_search_result_control_group,157^v4^new_style&amp;utm_term=uibutton%E8%AE%BE%E7%BD%AE%E5%AE%BD%E9%AB%98&amp;spm=1018.2226.3001.4187</a></p></li><li><p>iOS12-Swift5-Xcode10-如何直接在Storyboard的attributes inspector上给view设圆角和阴影</p><p><a href="https://juejin.cn/post/6844903834737704968">https://juejin.cn/post/6844903834737704968</a></p></li><li><p>【iOS开发】在textField左边设置图片以及图片与textField最左边和文字的距离</p><p><a href="https://www.jianshu.com/p/adfd4a30e9c0">https://www.jianshu.com/p/adfd4a30e9c0</a></p></li><li><p>IOS 选中UTableview某行cell，改变某行Cell上的控件颜色</p><p><a href="https://www.jianshu.com/p/ca7d07305e05">https://www.jianshu.com/p/ca7d07305e05</a></p></li><li><p>Swift字符串的截取</p><p><a href="https://www.jianshu.com/p/136d286e0d46">https://www.jianshu.com/p/136d286e0d46</a></p></li><li><p>Full-Screen iOS Loading Animation in Swift</p><p><a href="https://www.advancedswift.com/loading-overlay-view-fade-in-swift/">https://www.advancedswift.com/loading-overlay-view-fade-in-swift/</a></p></li><li><p>iOS学习：调用相机和相册，选择图片上传</p><p><a href="https://www.jianshu.com/p/dfab715a4987">https://www.jianshu.com/p/dfab715a4987</a></p></li><li><p>SwiftUI——如何修改TabView的各种属性（包括tabItem的属性），例如颜色、位置、大小等</p><p><a href="https://blog.csdn.net/qq_33919450/article/details/123617395">https://blog.csdn.net/qq_33919450/article/details/123617395</a></p></li><li><p>圆角特定SwiftUI</p><p><a href="https://qa.1r1g.com/sf/ask/3973223481/">https://qa.1r1g.com/sf/ask/3973223481/</a></p></li><li><p>SwiftUI一起学之四 – GPS定位</p><p><a href="https://www.jianshu.com/p/8563afd556a4">https://www.jianshu.com/p/8563afd556a4</a></p></li><li><p>iOS定位及解析经纬度【Swift】</p><p><a href="https://blog.csdn.net/weixin_46681371/article/details/121500370">https://blog.csdn.net/weixin_46681371/article/details/121500370</a></p></li><li><p>11步教你成为一名初级的iOS开发——零基础</p><p><a href="https://zhuanlan.zhihu.com/p/29981408">https://zhuanlan.zhihu.com/p/29981408</a></p></li><li><p>A look at UIView Animation Curves</p><p><a href="https://medium.com/@RobertGummesson/a-look-at-uiview-animation-curves-part-1-191d9e6de0ab">https://medium.com/@RobertGummesson/a-look-at-uiview-animation-curves-part-1-191d9e6de0ab</a></p></li><li><p>如何快速搭建属于自己的专属博客~</p><p><a href="https://laughingtiger.gitee.io/2021/11/29/ru-he-kuai-su-da-jian-shu-yu-zi-ji-de-bo-ke/#toc-heading-9">https://laughingtiger.gitee.io/2021/11/29/ru-he-kuai-su-da-jian-shu-yu-zi-ji-de-bo-ke/#toc-heading-9</a></p></li><li><p>hexo 博客升级并上传 github</p><p><a href="https://lfire.github.io/2018/02/27/update-hexo-blog/">https://lfire.github.io/2018/02/27/update-hexo-blog/</a></p></li><li><p>Markdown编辑器Typora快捷键一览</p><p><a href="https://zhuanlan.zhihu.com/p/84512986">https://zhuanlan.zhihu.com/p/84512986</a></p></li></ol>]]></content>
      
      
      
        <tags>
            
            <tag> 有用的东西 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>以往笔记</title>
      <link href="/2022/07/12/yi-wang-bi-ji/"/>
      <url>/2022/07/12/yi-wang-bi-ji/</url>
      
        <content type="html"><![CDATA[<h1 id="以往笔记"><a href="#以往笔记" class="headerlink" title="以往笔记"></a>以往笔记</h1><h2 id="Git"><a href="#Git" class="headerlink" title="Git"></a>Git</h2><p>1.git branch 分支名–切换分支</p><p>2.git status–查看当前状态</p><p>3.合并之前先git add .添加到暂存区,再git commit提交，然后再git pull,拉完后处理好矛盾后，再git add .  git commit git push</p><p>4.用git checkout -b 分支名生成新的分支，会根据当前所在分支复制一份代码并以新分支命名</p><p>5.用git push origin –delete 分支名可删除远程分支；用git branch -D 分支名可删除本地分支</p><p>6.用npm list -g –depth 0可查看在全局安装过的包</p><p>7.如需临时将打包的文件放置到服务器上看效果，可通过npm i serve -g来安装serve这个库，后通过serve build（打包好的文件夹的名字）来将包放到临时服务器运行</p><h2 id="Vue"><a href="#Vue" class="headerlink" title="Vue"></a>Vue</h2><p>1.通过添加属性后而无法刷新的，可用this.$set(obj,keyName,value)</p><p>2.去除input光标闪烁 caret-color: transparent</p><p>3.验证手机号码的正则表达式 </p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">const</span> regex <span class="token operator">=</span> <span class="token regex">/^1(3[0-9]|5[0-3,5-9]|7[1-3,5-8]|8[0-9])\d{8}$/</span></code></pre><p>4.ts文件报错 函数重复实现可在根目录下执行tsc –init添加tsconfig.json文件即可解决</p><p>5.js中bind会生成一个和原函数一样的新函数，且将this指向替换成bind的第一个参数，this指向是固定的，而不是在调用的时候才去找；而call和apply这两个方法都是在调用的时候去替换this指向，功能一样，用法不一样。call调用函数的时候，第一个参数是要替换的this指向，第二个及后面的参数都是给函数传递的参数。apply调用函数的时候也是第一个参数是要替换的this指向，第二个参数是数组，数组里面放的是所有的参数。有时仅希望将数组中的内容传递给参数而不改变this指向，则可以写成xxx.apply(null | 0 | ‘’ | undefined,参数2)</p><ol start="6"><li></li></ol><pre><code># 用于判断微信小程序下运行#ifdef MP-WEIXIN#endif# 用于判断支付宝小程序下运行#ifdef MP-ALIPAY#endif#endif 结束位置需根据实际运行时的路线来选择，if语句的结尾}同理</code></pre><h2 id="关于React和Vue中key的知识点"><a href="#关于React和Vue中key的知识点" class="headerlink" title="关于React和Vue中key的知识点"></a>关于React和Vue中key的知识点</h2><ol><li><p>React/Vue中的key有什么作用？（key的内部原理是什么？）</p><p>\1. 简单的说：key是虚拟DOM对象的标识，在更新显示时key起着极其重要的作用。</p><p>\2. 详细的说：当状态中的数据发生变化时，React会根据【新数据】生成【新的虚拟DOM】，随后React进行【新虚拟DOM】与【旧虚拟DOM】的diff比较，比较规则如下：</p><p>  a.旧虚拟DOM中找到了与新虚拟DOM相同的key:</p><pre><code>      (1).若虚拟DOM中内容没变，直接使用之前的真实DOM      (2).若虚拟DOM中内容变了，则生成新的真实DOM，随后替换掉页面中之前的真实DOM</code></pre><p>  b.旧虚拟DOM中未找到与新虚拟DOM相同的key</p><pre><code>      根据数据创建新的真实DOM，随后渲染到页面</code></pre></li><li><p>为什么遍历列表时，key最好不要用index？</p></li></ol><p>​用index作为key可能会引发的问题：</p><p>  \1. 若对数据进行：逆序添加、逆序删除等破坏顺序操作：</p><pre><code>           会产生没有必要的真实DOM更新 ==&gt;界面效果没问题，但效率低。</code></pre><p>  \2. 如果结构中还包含输入类的DOM：</p><pre><code>           会产生错误DOM更新 ==&gt; 界面有问题</code></pre><p>  \3. 注意⚠️如果不存在对数据的逆序添加、逆序删除等破坏顺序操作，</p><pre><code>           仅用于渲染列表用于展示，使用index作为key是没有问题的。</code></pre><p>​\4. 开发中如何选择key？</p><p>​最好使用每条数据的唯一标识作为key，比如id、手机号、身份证号、学号等唯一值。</p><p>​如果确定只是简单的展示数据，用index也是可以的。</p>]]></content>
      
      
      <categories>
          
          <category> note </category>
          
      </categories>
      
      
        <tags>
            
            <tag> note </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>博客管理指南</title>
      <link href="/2022/07/12/bo-ke-guan-li-zhi-nan/"/>
      <url>/2022/07/12/bo-ke-guan-li-zhi-nan/</url>
      
        <content type="html"><![CDATA[<h3 id="博客文章管理指令"><a href="#博客文章管理指令" class="headerlink" title="博客文章管理指令"></a>博客文章管理指令</h3><p>hexo clean &amp;&amp; hero g &amp;&amp; hexo d</p><h3 id="博客源码管理"><a href="#博客源码管理" class="headerlink" title="博客源码管理"></a>博客源码管理</h3><p>分支src下，正常git流程</p><p>参考: <a href="https://lfire.github.io/2018/02/27/update-hexo-blog/">https://lfire.github.io/2018/02/27/update-hexo-blog/</a></p>]]></content>
      
      
      <categories>
          
          <category> 博客 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 博客 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
